/**@file

@copyright
  INTEL CONFIDENTIAL
  Copyright 2010 - 2019 Intel Corporation.

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.

  This file contains a 'Sample Driver' and is licensed as such under the terms
  of your license agreement with Intel or your vendor. This file may be modified
  by the user, subject to the additional terms of the license agreement.

@par Specification Reference:
**/

#ifndef MDEPKG_NDEBUG
#define DEBUG_INTERFACE_FORM_ENABLE
#endif

#include <SetupPrivate.h>
#include <CpuSmm.h>
#include <SaSetup.h>
#include "MeSetup.h"
#include "PlatformBoardId.h"
#if FixedPcdGetBool(PcdTpmEnable) == 1
#include "TcgSetup.h"
#include "Tcg2ConfigNvData.h" // TCG2 implementation
#endif
#if FixedPcdGetBool(PcdNat87393Present) == 1
#include "SioNat87393VSetup.h"
#endif
#ifdef SIO_WPCN381U
#include "SioWPCN381USetup.h"
#endif //SIO_WPCN381U
#include <IccSetupData.h>

typedef struct {
  UINT8 InstallExtOpRom;
} PCI_BUS_SETUP;

#ifdef WHEA_SUPPORT_FLAG
typedef struct{
  UINT8   WheaSupport;
  UINT8   LogErrors;
  UINT8   ErrorGeneration;
  UINT8   ProcessorErrors; // function not available
  UINT8   SaErrors;
  UINT8   PchErrors;
  UINT8   PcieErrors;
  UINT8   PlatformErrors;
  UINT8   PropagateSerr;
  UINT8   PropagatePerr;
  UINT8   FatErr;
  UINT8   UnCorRecErr;
  UINT8   CorErr;
} WHEA_SETUP;
#endif // WHEA_SUPPORT_FLAG

formset guid = ADVANCED_FORM_SET_GUID,
  title      = STRING_TOKEN(STR_ADVANCED),
  help       = STRING_TOKEN(STR_ADVANCED_HELP),
  classguid  = FRONT_PAGE_GUID,
  class      = ADVANCED_FORM_SET_CLASS,
  subclass   = 0,

  SA_SETUP_VARSTORE
  ME_SETUP_VARSTORE
  CPU_SETUP_VARSTORE
  PCH_SETUP_VARSTORE
  SI_SETUP_VARSTORE
  SETUP_DATA_VARSTORE
  SYSTEM_ACCESS_VARSTORE
#ifdef DEBUG_INTERFACE_FORM_ENABLE
  DEBUG_CONFIG_DATA_VARSTORE
#endif // DEBUG_INTERFACE_FORM_ENABLE

  // PciBusSetup is an EfiVarStore that is related to EFI variable with attribute 0x07
  // (EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS)
  efivarstore PCI_BUS_SETUP,
    attribute = 0x7,
    name      = PciBusSetup,
    guid      = SETUP_GUID;

#ifdef WHEA_SUPPORT_FLAG
  varstore WHEA_SETUP,
    varid = AUTO_ID(WHEA_SETUP_KEY),
    name  = WheaSetup,
    guid  = SETUP_GUID;
#endif // WHEA_SUPPORT_FLAG

  varstore SETUP_VOLATILE_DATA,
    varid = AUTO_ID(SETUP_VOLATILE_DATA_ID),
    name  = SetupVolatileData,
    guid  = SETUP_GUID;

  varstore OS_PROFILE,
    name  = OsProfile,
    guid  = OS_PROFILE_GUID;

  varstore SETUP_CPU_FEATURES,
    varid = AUTO_ID(CPU_FEATURES_ID),
    name  = SetupCpuFeatures,
    guid  = SETUP_GUID;

  varstore CPU_SETUP_VOLATILE_DATA,
    varid = AUTO_ID(CPU_SETUP_VOLATILE_DATA_ID),
    name  = CpuSetupVolatileData,
    guid  = CPU_SETUP_GUID;

  efivarstore CPU_SETUP_SGX_EPOCH_DATA,
    attribute = 0x3,
    name  = CpuSetupSgxEpochData,
    guid  = CPU_SETUP_GUID;

  varstore CPU_SMM,
    varid = AUTO_ID(CPU_SMM_FEATURE_ID),
    name  = CpuSmm,
    guid  = CPUSMM_GUID;

  varstore TBT_SETUP_VOLATILE_DATA,
    varid = AUTO_ID(TBT_SETUP_VOLATILE_DATA_ID),
    name  = TbtSetupVolatileData,
    guid  = SETUP_GUID;

  varstore ME_SETUP_STORAGE,
    varid = AUTO_ID(ME_FEATURES_ID),
    name  = MeSetupStorage,
    guid  = ME_SETUP_GUID;

#if FixedPcdGetBool(PcdTpmEnable) == 1
  // TcgSetup is an EfiVarStore that is related to EFI variable with attribute 0x07
  // (EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS)
  efivarstore TCG_SETUP,
    attribute = 0x7,
    name      = TcgSetup,
    guid      = SETUP_GUID;

  varstore TCG2_CONFIGURATION,
    varid = AUTO_ID(KEY_TCG2_CONFIGURATION),
    name  = TCG2_CONFIGURATION,
    guid  = TCG2_CONFIG_FORM_SET_GUID;
#endif
  //FLOPPY
#if FixedPcdGetBool(PcdNat87393Present) == 1
  //FLOPPY
  varstore NAT_FDC_V_DATA,
    varid = AUTO_ID(NAT_FDC_V_DATA_KEY),
    name  = PNP0604_0_VV,
    guid  = SIO_VAR_GUID;

  varstore NAT_FDC_NV_DATA,
    varid = AUTO_ID(NAT_FDC_NV_DATA_KEY),
    name  = PNP0604_0_NV,
    guid  = SIO_VAR_GUID;

  //COM A
  varstore NAT_COMA_V_DATA,
    varid = AUTO_ID(NAT_COMA_V_DATA_KEY),
    name  = PNP0501_2_VV,
    guid  = SIO_VAR_GUID;

  varstore NAT_COMA_NV_DATA,
    varid = AUTO_ID(NAT_COMA_NV_DATA_KEY),
    name  = PNP0501_2_NV,
    guid  = SIO_VAR_GUID;

  //PARALLEL
  varstore NAT_LPT_V_DATA,
    varid = AUTO_ID(NAT_LPT_V_DATA_KEY),
    name  = PNP0400_1_VV,
    guid  = SIO_VAR_GUID;

  varstore NAT_LPT_NV_DATA,
    varid = AUTO_ID(NAT_LPT_NV_DATA_KEY),
    name  = PNP0400_1_NV,
    guid  = SIO_VAR_GUID;
#endif
#ifdef SIO_WPCN381U
  //FLOPPY
  varstore WPCN381U_FDC_V_DATA,
    varid = AUTO_ID(WPCN381U_FDC_V_DATA_KEY),
    name  = PNP0604_2_VV,
    guid  = SIO_VAR_GUID;

  varstore WPCN381U_FDC_NV_DATA,
    varid = AUTO_ID(WPCN381U_FDC_NV_DATA_KEY),
    name  = PNP0604_2_NV,
    guid  = SIO_VAR_GUID;

  //COM A
  varstore WPCN381U_COMA_V_DATA,
    varid = AUTO_ID(WPCN381U_COMA_V_DATA_KEY),
    name  = PNP0501_3_VV,
    guid  = SIO_VAR_GUID;

  varstore WPCN381U_COMA_NV_DATA,
    varid = AUTO_ID(WPCN381U_COMA_NV_DATA_KEY),
    name  = PNP0501_3_NV,
    guid  = SIO_VAR_GUID;

  //COM B
  varstore WPCN381U_COMB_V_DATA,
    varid = AUTO_ID(WPCN381U_COMB_V_DATA_KEY),
    name  = PNP0501_4_VV,
    guid  = SIO_VAR_GUID;

  varstore WPCN381U_COMB_NV_DATA,
    varid = AUTO_ID(WPCN381U_COMB_NV_DATA_KEY),
    name  = PNP0501_4_NV,
    guid  = SIO_VAR_GUID;

  //PARALLEL
  varstore WPCN381U_LPT_V_DATA,
    varid = AUTO_ID(WPCN381U_LPT_V_DATA_KEY),
    name  = PNP0400_2_VV,
    guid  = SIO_VAR_GUID;

  varstore WPCN381U_LPT_NV_DATA,
    varid = AUTO_ID(WPCN381U_LPT_NV_DATA_KEY),
    name  = PNP0400_2_NV,
    guid  = SIO_VAR_GUID;
#endif //SIO_WPCN381U

  varstore ICC_SETUP_DATA,
    name = IccAdvancedSetupDataVar,
    guid = INTEL_ICC_GUID;

  defaultstore MyStandardDefault,
    prompt    = STRING_TOKEN(STR_STANDARD_DEFAULT_PROMPT),
    attribute = 0x0000; // Default ID: 0000 standard default

  form formid = AUTO_ID(ADVANCED_MAIN),
    title     = STRING_TOKEN(STR_ADVANCED);

   text
     help   = STRING_TOKEN(STR_EMPTY_STRING),
     text   = STRING_TOKEN(STR_SETUP_DATA_REVISION),
     text   = STRING_TOKEN(STR_SETUP_DATA_REVISION_VALUE),
     flags  = 0,
     key    = 0;

   text
     help   = STRING_TOKEN(STR_EMPTY_STRING),
     text   = STRING_TOKEN(STR_ME_SETUP_REVISION),
     text   = STRING_TOKEN(STR_ME_SETUP_REVISION_VALUE),
     flags  = 0,
     key    = 0;

   text
     help   = STRING_TOKEN(STR_EMPTY_STRING),
     text   = STRING_TOKEN(STR_CPU_SETUP_REVISION),
     text   = STRING_TOKEN(STR_CPU_SETUP_REVISION_VALUE),
     flags  = 0,
     key    = 0;

   text
     help   = STRING_TOKEN(STR_EMPTY_STRING),
     text   = STRING_TOKEN(STR_SA_SETUP_REVISION),
     text   = STRING_TOKEN(STR_SA_SETUP_REVISION_VALUE),
     flags  = 0,
     key    = 0;

   text
     help   = STRING_TOKEN(STR_EMPTY_STRING),
     text   = STRING_TOKEN(STR_PCH_SETUP_REVISION),
     text   = STRING_TOKEN(STR_PCH_SETUP_REVISION_VALUE),
     flags  = 0,
     key    = 0;

   text
     help   = STRING_TOKEN(STR_EMPTY_STRING),
     text   = STRING_TOKEN(STR_SI_SETUP_REVISION),
     text   = STRING_TOKEN(STR_SI_SETUP_REVISION_VALUE),
     flags  = 0,
     key    = 0;

    oneof varid   = SETUP_DATA.FirmwareConfiguration,
      prompt      = STRING_TOKEN(STR_FIRMWARE_CONFIG_NAME),
      help        = STRING_TOKEN(STR_FIRMWARE_CONFIG_NAME_HELP),
      option text = STRING_TOKEN(STR_FW_CONFIG_DEFAULT_VALUE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_FW_CONFIG_PRODUCTION_VALUE), value = 1, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_FW_CONFIG_TEST_VALUE), value = 2, flags = RESET_REQUIRED;
    endoneof;




    // specify PlatId scope
    disableif TRUE;
      oneof varid   = SETUP_VOLATILE_DATA.PlatId,
        prompt      = STRING_TOKEN(STR_PLATID_PROMPT),
        help        = STRING_TOKEN(0),
        option text = STRING_TOKEN(STR_NONE), value = 0, flags = 0;
      endoneof;
    endif; // disableif

    suppressif TRUE;
    // Specify OS Profile
    oneof varid   = OS_PROFILE.OsProfile,
      prompt      = STRING_TOKEN(STR_OS_PROFILE),
      help        = STRING_TOKEN(STR_OS_PROFILE_HELP),
      option text = STRING_TOKEN(STR_NONE), value = 0, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ANDROID), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WINDOWS_CS), value = 2, flags = RESET_REQUIRED;
    endoneof;
    endif;

    // Define goto commands for the forms defined in this file
    goto DEBUG_FORM_ID,
      prompt = STRING_TOKEN(STR_DEBUG_FORM),
      help   = STRING_TOKEN(STR_DEBUG_FORM_HELP);

    // Define goto commands for the forms defined in this file
    goto PCI_FORM_ID,
      prompt = STRING_TOKEN(STR_PCI_FORM),
      help   = STRING_TOKEN(STR_PCI_FORM_HELP);

    // Define goto commands for the forms defined in this file
    goto ACPI_FORM_ID,
      prompt = STRING_TOKEN(STR_ACPI_FORM),
      help   = STRING_TOKEN(STR_ACPI_FORM_HELP);

    // Define goto commands for the forms defined in this file
    goto CPU_FORM_ID,
      prompt = STRING_TOKEN(STR_CPU_FORM),
      help   = STRING_TOKEN(STR_CPU_FORM_HELP);

    suppressif TRUE;
    goto CONNECTIVITY_OPTIONS_FORM_ID,
      prompt = STRING_TOKEN(STR_CONNECTIVITY_CONFIGURATION),
      help   = STRING_TOKEN(STR_CONNECTIVITY_HELP);
    endif;

    goto POWER_CONFIG_FORM_ID,
      prompt = STRING_TOKEN(STR_POWER_CONFIGURATION),
      help   = STRING_TOKEN(STR_POWER_CONFIGURATION_HELP);

    goto TCC_MODE_CONFIG_FORM_ID,
      prompt = STRING_TOKEN(STR_TCC_MODE_CONFIG_FORM_TITLE),
      help = STRING_TOKEN(STR_TCC_MODE_CONFIG_FORM_HELP);


#if FixedPcdGetBool(PcdOverclockEnable) == 1
    suppressif ideqval SETUP_VOLATILE_DATA.PlatformType == TypeUltUlx;
      goto PERFORMANCE_MENU_CONFIG_FORM_ID,
        prompt = STRING_TOKEN(STR_PERFORMANCE_MENU_CONFIGURATION),
        help   = STRING_TOKEN(STR_PERFORMANCE_CONFIGURATION_HELP);
    endif;
#endif

    // Define goto commands for the forms defined in this file
    goto MEMORY_FORM_ID,
      prompt = STRING_TOKEN(STR_MEMORY_FORM),
      help   = STRING_TOKEN(STR_MEMORY_FORM_HELP);

    goto NB_FORM_ID,
      prompt = STRING_TOKEN(STR_NB_FORM),
      help   = STRING_TOKEN(STR_NB_FORM_HELP);

    // Define goto commands for the forms defined in this file
    goto PCIE_FORM_ID,
      prompt = STRING_TOKEN(STR_PCIE_FORM),
      help   = STRING_TOKEN(STR_PCIE_FORM_HELP);

    // Define goto commands for the forms defined in this file
    goto SB_FORM_ID,
      prompt = STRING_TOKEN(STR_SB_FORM),
      help   = STRING_TOKEN(STR_SB_FORM_HELP);

    // Define goto commands for the forms defined in this file
    goto ME_FORM_ID,
      prompt = STRING_TOKEN(STR_ME_FORM),
      help   = STRING_TOKEN(STR_ME_FORM_HELP);

    goto THERMAL_CONFIG_FORM_ID,
      prompt = STRING_TOKEN(STR_THERMAL_CONFIGURATION),
      help   = STRING_TOKEN(STR_THERMAL_CONFIGURATION_HELP);

    // Define goto commands for the forms defined in this file
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorMobile AND
               NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorEmbedded;
      goto PLATFORM_SETTINGS_FORM_ID,
        prompt = STRING_TOKEN(STR_PLATFORM_SETTINGS_FORM),
        help   = STRING_TOKEN(STR_PLATFORM_SETTINGS_FORM_HELP);
    endif; // suppressif


    goto RTD3_FORM_ID,
      prompt = STRING_TOKEN(STR_RTD3_FORM),
      help   = STRING_TOKEN(STR_RTD3_FORM_HELP);


#if FixedPcdGetBool(PcdTpmEnable) == 1
    goto TPM_CONFIG_FORM_ID,
      prompt = STRING_TOKEN(STR_TPM_CFG),
      help   = STRING_TOKEN(STR_TPM_CFG_HELP);
#endif
#if FixedPcdGetBool(PcdNat87393Present) == 1
    suppressif ideqval NAT_FDC_V_DATA.FdcImplemented == 0x0;
      goto NAT_SIO_FORM_ID,
        prompt = STRING_TOKEN(STR_NAT_SIO_FORM),
        help   = STRING_TOKEN(STR_SIO_FORM_HELP);
    endif; // suppressif
#endif
#ifdef SIO_WPCN381U
    suppressif ideqval WPCN381U_COMA_V_DATA.ComImplemented == 0x0;
      goto WPCN381U_SIO_FORM_ID,
        prompt = STRING_TOKEN(STR_WPCN381U_SIO_FORM),
        help   = STRING_TOKEN(STR_SIO_FORM_HELP);
    endif; // suppressif
#endif //SIO_WPCN381U


    goto REWORK_INFORMATION_FORM_ID,
      prompt = STRING_TOKEN(STR_REWORK_INTERFACE_FORM),
      help   = STRING_TOKEN(STR_REWORK_INTERFACE_FORM_HELP);

#ifdef DEBUG_INTERFACE_FORM_ENABLE
#ifndef RELEASE_CATALOG
    goto DEBUG_INTERFACE_FORM_ID,
      prompt = STRING_TOKEN(STR_DEBUG_INTERFACE_FORM),
      help   = STRING_TOKEN(STR_DEBUG_INTERFACE_FORM_HELP);
#endif
#endif // DEBUG_INTERFACE_FORM_ENABLE

  endform;

  #include "DebugSetup.hfr"
  #include "PciBusSetup.hfr"
  #include "AcpiSetup.hfr"
  #include "CpuSetup.hfr"
  #include "ConnectivitySetup.hfr"
#if FixedPcdGetBool(PcdOverclockEnable) == 1
  #include "OverClockSetup.hfr"
#endif
  #include "SaSetup.hfr"
  #include "PcieSetup.hfr"
  #include "PchSetup.hfr"
  #include "MeSetup.hfr"
  #include "PlatformSetup.hfr"
#if FixedPcdGetBool(PcdTpmEnable) == 1
  #include "TcgSetup.hfr"
#endif
#if FixedPcdGetBool(PcdNat87393Present) == 1
  #include "SioNat87393VSetup.hfr"
#endif
#ifdef SIO_WPCN381U
  #include "SioWPCN381USetup.hfr"
#endif //SIO_WPCN381U
#if FixedPcdGetBool(PcdNct677FPresent) == 1
  #include "SioNct6776FSetup.hfr"
#endif
  #include "HhmSetup.hfr"
  #include "TbtSetup.hfr"
  #include "IccSetup.hfr"
  #include "BoardReworkInformationSetup.hfr"
#if FixedPcdGetBool(PcdS5ChargingEnable) == 1
  #include "UefiCharging.hfr"
#endif
  #include "TccSetup.hfr"
  #include "FusaSetup.hfr"
#ifdef DEBUG_INTERFACE_FORM_ENABLE
  #include "StatusCodeSetup.hfr"
#endif // DEBUG_INTERFACE_FORM_ENABLE

endformset;
