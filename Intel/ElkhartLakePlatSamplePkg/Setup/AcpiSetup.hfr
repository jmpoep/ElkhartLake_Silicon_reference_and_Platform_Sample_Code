/** @file

@copyright
  INTEL CONFIDENTIAL
  Copyright 2014 - 2018 Intel Corporation.

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.

  This file contains a 'Sample Driver' and is licensed as such under the terms
  of your license agreement with Intel or your vendor. This file may be modified
  by the user, subject to the additional terms of the license agreement.

@par Specification
**/

form formid = AUTO_ID(ACPI_FORM_ID),
  title     = STRING_TOKEN(STR_ACPI_FORM);

  SUBTITLE(STRING_TOKEN(STR_ACPI_FORM))
  SEPARATOR

  text
    help  = STRING_TOKEN(STR_ACPI_VERSION_HELP),
    text  = STRING_TOKEN(STR_ACPI_VERSION_STRING),
    text  = STRING_TOKEN(STR_ACPI_VERSION_VALUE),
    flags = 0,
    key = 0;

  grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
    checkbox varid = SETUP_DATA.AcpiAuto,
      prompt       = STRING_TOKEN(STR_ACPI_AUTO_PROMPT),
      help         = STRING_TOKEN(STR_ACPI_AUTO_HELP),
      flags        = 0, //Flags behavior for checkbox is overloaded so that it equals a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
      key          = 0,
    endcheckbox;
  endif; // grayoutif

  SEPARATOR
  suppressif ideqval SETUP_DATA.AcpiAuto == 0x1;
    grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;

      checkbox varid = SETUP_DATA.AcpiHibernate,
        prompt       = STRING_TOKEN(STR_ACPI_S4_PROMPT),
        help         = STRING_TOKEN(STR_ACPI_S4_HELP),
        flags        = CHECKBOX_DEFAULT | CHECKBOX_DEFAULT_MFG | RESET_REQUIRED, //Flags behavior for checkbox is overloaded so that it equals a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
        key          = 0,
      endcheckbox;

      checkbox varid = SETUP_DATA.PtidSupport,
        prompt       = STRING_TOKEN(STR_PTID_PROMPT),
        help         = STRING_TOKEN(STR_PTID_HELP),
        flags        = CHECKBOX_DEFAULT | CHECKBOX_DEFAULT_MFG | RESET_REQUIRED, //Flags behavior for checkbox is overloaded so that it equals a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
        key          = 0,
      endcheckbox;

      oneof varid   = SETUP_DATA.PeciAccessMethod,
        prompt      = STRING_TOKEN(STR_PECI_ACCESS_PROMPT),
        help        = STRING_TOKEN(STR_PECI_ACCESS_HELP),
        option text = STRING_TOKEN(STR_PECI_ACCESS_IO), value = 0, flags = RESET_REQUIRED|DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_PECI_ACCESS_ACPI), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.AcpiSleepState,
        prompt      = STRING_TOKEN(STR_ACPI_S3_PROMPT),
        help        = STRING_TOKEN(STR_ACPI_S3_HELP),
        option text = STRING_TOKEN(STR_ACPI_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ACPI_ENABLED), value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
  SUPPRESS_GRAYOUT_ENDIF

  suppressif ideqval PCH_SETUP.PcieRootPortEn[OFFSET_0] == 0x0;
    oneof varid   = SETUP_DATA.PciExpNative,
      prompt      = STRING_TOKEN(STR_ACPI_PCIE_NATIVE_PROMPT),
      help        = STRING_TOKEN(STR_ACPI_PCIE_NATIVE_HELP),
      option text = STRING_TOKEN(STR_ACPI_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ACPI_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif; // suppressif

  suppressif ideqval SETUP_DATA.PciExpNative == 0x0;
    oneof varid   = SETUP_DATA.NativeAspmEnable,
      prompt      = STRING_TOKEN(STR_NATIVE_ASPM_PROMPT),
      help        = STRING_TOKEN(STR_NATIVE_ASPM_HELP),
      option text = STRING_TOKEN(STR_AUTO), value = 2, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_ACPI_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ACPI_DISABLED), value = 0, flags = RESET_REQUIRED;
    endoneof;
  endif; // suppressif

  oneof varid   = SA_SETUP.BdatEnable,
    prompt      = STRING_TOKEN(STR_BDAT_EN_PROMPT),
    help        = STRING_TOKEN(STR_BDAT_EN_HELP),
    default     = 0, defaultstore = MyStandardDefault,
    option text = STRING_TOKEN(STR_ACPI_DISABLED), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ACPI_ENABLED), value = 1, flags = RESET_REQUIRED;
  endoneof;

  SEPARATOR

#ifdef RTCWakeup_SUPPORT_FLAG
  oneof varid   = SETUP_DATA.WakeOnRTCS5,
    prompt      = STRING_TOKEN(STR_WAKE_ON_RTC_PROMPT),
    help        = STRING_TOKEN(STR_WAKE_ON_RTC_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value=0, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value=1, flags= RESET_REQUIRED;
  endoneof;
#endif //RTCWakeup_SUPPORT_FLAG

#ifdef ACPI_DEBUG_FLAG
  oneof varid   = SETUP_DATA.AcpiDebug,
    prompt      = STRING_TOKEN(STR_ACPI_DEBUG_PROMPT),
    help        = STRING_TOKEN(STR_ACPI_DEBUG_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
  endoneof;

  suppressif ideqval SETUP_DATA.AcpiDebug == 0;
    text
      help  = STRING_TOKEN(STR_ACPI_DEBUG_ADDRESS_HELP),
      text  = STRING_TOKEN(STR_ACPI_DEBUG_ADDRESS_NAME),
      text  = STRING_TOKEN(STR_ACPI_DEBUG_ADDRESS_VALUE),
      flags = 0,
      key   = 0;
  endif; // suppressif
#endif //ACPI_DEBUG_FLAG

#ifdef WHEA_SUPPORT_FLAG
  //
  // Whea
  //
  oneof varid   = WHEA_SETUP.WheaSupport,
    prompt      = STRING_TOKEN(STR_WHEA_SUPPORT_PROMPT),
    help        = STRING_TOKEN(STR_WHEA_SUPPORT_HELP),
    option text = STRING_TOKEN(STR_WHEA_DISABLED), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    option text = STRING_TOKEN(STR_WHEA_ENABLED), value = 1, flags = RESET_REQUIRED;
  endoneof;

  //
  // Log Errors
  //
  oneof varid   = WHEA_SETUP.LogErrors,
    prompt      = STRING_TOKEN(STR_LOG_ERRORS_PROMPT),
    help        = STRING_TOKEN(STR_LOG_ERRORS_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
  endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  suppressif ideqval WHEA_SETUP.LogErrors == 0x00;
    oneof varid   = WHEA_SETUP.ErrorGeneration,
      prompt      = STRING_TOKEN(STR_ERROR_GEN_LOG_PROMPT),
      help        = STRING_TOKEN(STR_ERROR_GEN_LOG_HELP),
      option text = STRING_TOKEN(STR_NOINBAND), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_SMIPMI), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    oneof varid   = WHEA_SETUP.PchErrors,
      prompt      = STRING_TOKEN(STR_PCH_ERROR_PROMPT),
      help        = STRING_TOKEN(STR_PCH_ERROR_HELP),
      option text = STRING_TOKEN(STR_NO), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_YES), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    oneof varid   = WHEA_SETUP.PcieErrors,
      prompt      = STRING_TOKEN(STR_PCIE_LOG_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_LOG_HELP),
      option text = STRING_TOKEN(STR_NO), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_YES), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    oneof varid   = WHEA_SETUP.PlatformErrors,
      prompt      = STRING_TOKEN(STR_PLATFORM_LOG_PROMPT),
      help        = STRING_TOKEN(STR_PLATFORM_LOG_HELP),
      option text = STRING_TOKEN(STR_NO), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      option text = STRING_TOKEN(STR_YES), value = 1, flags = RESET_REQUIRED;
    endoneof;

    //
    // Enable SERR# propagation.
    //
    oneof varid   = WHEA_SETUP.PropagateSerr,
      prompt      = STRING_TOKEN(STR_ENABLE_SERR_PROP_PROMPT),
      help        = STRING_TOKEN(STR_ENABLE_SERR_PROP_HELP),
      option text = STRING_TOKEN(STR_NO), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_YES), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;
  endif; // suppressif

  //
  // Enable SERR# propagation.
  //
  suppressif ideqval WHEA_SETUP.LogErrors == 0x00 OR
             ideqval WHEA_SETUP.PropagateSerr == 0x00;
    oneof varid   = WHEA_SETUP.PropagatePerr,
      prompt      = STRING_TOKEN(STR_ENABLE_PERR_PROP_PROMPT),
      help        = STRING_TOKEN(STR_ENABLE_PERR_PROP_HELP),
      option text = STRING_TOKEN(STR_NO), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_YES), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;
  endif; // suppressif

  //
  // Fatal Errors
  //
  suppressif ideqval WHEA_SETUP.LogErrors == 0x00 OR
             ideqval WHEA_SETUP.PcieErrors == 0x00;
    oneof varid   = WHEA_SETUP.FatErr,
      prompt      = STRING_TOKEN(STR_FATAL_ERRORS_PROMPT),
      help        = STRING_TOKEN(STR_FATAL_ERRORS_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    //
    // Uncorrectable/Recoverable Errors
    //
    oneof varid   = WHEA_SETUP.UnCorRecErr,
      prompt      = STRING_TOKEN(STR_UR_ERRORS_PROMPT),
      help        = STRING_TOKEN(STR_UR_ERRORS_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    //
    // Correctable Errors
    //
    oneof varid   = WHEA_SETUP.CorErr,
      prompt      = STRING_TOKEN(STR_CORRECTABLE_ERRORS_PROMPT),
      help        = STRING_TOKEN(STR_CORRECTABLE_ERRORS_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif; // suppressif
#endif  //#ifdef WHEA_SUPPORT_FLAG

    grayoutif ideqval SETUP_DATA.TccMode == 1;
      oneof varid   = SETUP_DATA.LowPowerS0Idle,
        questionid  = KEY_LOW_POWER_S0_IDLE,
        prompt      = STRING_TOKEN(STR_LOW_POWER_S0_IDLE),
        help        = STRING_TOKEN(STR_LOW_POWER_S0_IDLE_HELP),
        flags       = INTERACTIVE,
        default     = 1, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED | INTERACTIVE;
        warningif prompt = STRING_TOKEN(STR_HID_ENABLE_WARNING_POPUP),
          ideqval SETUP_DATA.LowPowerS0Idle == 1
        endif
      endoneof;
    endif;

    suppressif NOT ideqval SETUP_DATA.LowPowerS0Idle == 1;
#ifdef EC_SUPPORT
      oneof varid   = SETUP_DATA.CSNotifyEC,
        prompt      = STRING_TOKEN(STR_NOTIFY_EC),
        help        = STRING_TOKEN(STR_NOTIFY_EC_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SETUP_DATA.CSNotifyEC == 1;
        oneof varid   = SETUP_DATA.CSDebugLightEC,
          prompt      = STRING_TOKEN(STR_DEBUG_LT_EC),
          help        = STRING_TOKEN(STR_DEBUG_LT_EC_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.EcLowPowerMode,
          prompt      = STRING_TOKEN(STR_EC_LOWPOWER_MODE),
          help        = STRING_TOKEN(STR_EC_LOWPOWER_MODE_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif; // suppressif
#endif
      oneof varid   = SETUP_DATA.SensorStandby,
        prompt      = STRING_TOKEN(STR_SENSOR_STANDBY),
        help        = STRING_TOKEN(STR_SENSOR_STANDBY_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PL1LimitCS,
        prompt      = STRING_TOKEN(STR_PL1_LIMIT_CS),
        help        = STRING_TOKEN(STR_PL1_LIMIT_CS_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SETUP_DATA.PL1LimitCS == 1;
        numeric varid = SETUP_DATA.PL1LimitCSValue,
          prompt      = STRING_TOKEN(STR_PL1_LIMIT_CS_VALUE),
          help        = STRING_TOKEN(STR_PL1_LIMIT_CS_VALUE_HELP),
          minimum     = 3000,
          maximum     = 20000,
          step        = 125,
          default     = 4500,
        endnumeric;
      endif; // suppressif

       goto PEP_FORM_ID,
          prompt = STRING_TOKEN(STR_PEP_CONFIGURATION),
          help = STRING_TOKEN(STR_PEP_CONFIGURATION_HELP);

      suppressif TRUE;  // Hiding this setup option becuase of C10 Residency Counter was vastly depreciated in EHL platform
        oneof varid   = SETUP_DATA.LpitResidencyCounter,
          prompt      = STRING_TOKEN(STR_LPIT_RESIDENCY_COUNTER_PROMPT),
          help        = STRING_TOKEN(STR_LPIT_RESIDENCY_COUNTER_HELP),
          option text = STRING_TOKEN(STR_SLP_S0_RESIDENCY_COUNTER), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_C10_RESIDENCY_COUNTER), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif; // suppressif

    endif; // suppressif NOT ideqval SETUP_DATA.LowPowerS0Idle == 1

  SEPARATOR

  suppressif (ideqval SETUP_DATA.Rtd3Support == 0x0 OR
              ((NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorDesktop) AND
           (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorMobile)));
    oneof varid   = SETUP_DATA.IrmtConfiguration,
      prompt      = STRING_TOKEN(STR_IRMT),
      help        = STRING_TOKEN(STR_IRMT_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif; // suppressif

  SEPARATOR

  oneof varid   = SETUP_DATA.LoadSSDTFromFile,
    prompt      = STRING_TOKEN(STR_ACPI_SSDT_FROM_FILE),
    help        = STRING_TOKEN(STR_ACPI_SSDT_FROM_FILE),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
  endoneof;

  SEPARATOR

  oneof varid     = SETUP_DATA.PciDelayOptimizationEcr,
    prompt      = STRING_TOKEN(STR_PCI_DELAY_OPTIMIZATION_ECR),
    help        = STRING_TOKEN(STR_PCI_DELAY_OPTIMIZATION_ECR_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
  endoneof;

  oneof varid  = SETUP_DATA.EnableMsiInFadt,
    prompt = STRING_TOKEN(STR_PCI_MSI_ENABLED_IN_FADT),
    help = STRING_TOKEN(STR_PCI_MSI_ENABLED_IN_FADT_HELP),
    option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

endform;  // ACPI_FORM_ID

//
// Form to configure PEP constraints
//
form formid = AUTO_ID(PEP_FORM_ID),
  title = STRING_TOKEN(STR_PEP_CONFIGURATION);

  SUBTITLE(STRING_TOKEN(STR_PEP_CONFIGURATION))
  SEPARATOR

  oneof varid       = SETUP_DATA.PepCpu,
        prompt      = STRING_TOKEN(STR_PEP_CPU),
        help        = STRING_TOKEN(STR_PEP_CPU_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepGfx,
        prompt      = STRING_TOKEN(STR_PEP_GFX),
        help        = STRING_TOKEN(STR_PEP_GFX_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepIpu,
        prompt      = STRING_TOKEN(STR_PEP_IPU),
        help        = STRING_TOKEN(STR_PEP_IPU_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepPeg0,
        prompt      = STRING_TOKEN(STR_PEP_PEG0),
        help        = STRING_TOKEN(STR_PEP_PEG0_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepSataContraints,
        prompt      = STRING_TOKEN(STR_PEP_SATA),
        help        = STRING_TOKEN(STR_PEP_SATA_HELP),
        option text = STRING_TOKEN(STR_PEP_SATA_NO_CONSTRAINT), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PEP_SATA_ADAPTER_D0F1),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PEP_SATA_ADAPTER_D3),    value = 3, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepPcieStorage,
        prompt      = STRING_TOKEN(STR_PEP_PCIE_STORAGE),
        help        = STRING_TOKEN(STR_PEP_PCIE_STORAGE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PchSerialIoUart[SERIAL_IO_UART0] == 0 ;
        oneof varid   = SETUP_DATA.PepUart0,
          prompt      = STRING_TOKEN(STR_PEP_UART0),
          help        = STRING_TOKEN(STR_PEP_UART_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoUart[SERIAL_IO_UART1] == 0;
        oneof varid   = SETUP_DATA.PepUart1,
          prompt      = STRING_TOKEN(STR_PEP_UART1),
          help        = STRING_TOKEN(STR_PEP_UART_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoUart[SERIAL_IO_UART2] == 0;
        oneof varid   = SETUP_DATA.PepUart2,
          prompt      = STRING_TOKEN(STR_PEP_UART2),
          help        = STRING_TOKEN(STR_PEP_UART_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
      
      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C0] == 0;
        oneof varid   = SETUP_DATA.PepI2c0,
          prompt      = STRING_TOKEN(STR_PEP_I2C0),
          help        = STRING_TOKEN(STR_PEP_I2C_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C1] == 0;
        oneof varid   = SETUP_DATA.PepI2c1,
          prompt      = STRING_TOKEN(STR_PEP_I2C1),
          help        = STRING_TOKEN(STR_PEP_I2C_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C2] == 0;
        oneof varid   = SETUP_DATA.PepI2c2,
          prompt      = STRING_TOKEN(STR_PEP_I2C2),
          help        = STRING_TOKEN(STR_PEP_I2C_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C3] == 0;
        oneof varid   = SETUP_DATA.PepI2c3,
          prompt      = STRING_TOKEN(STR_PEP_I2C3),
          help        = STRING_TOKEN(STR_PEP_I2C_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C4] == 0;
        oneof varid   = SETUP_DATA.PepI2c4,
          prompt      = STRING_TOKEN(STR_PEP_I2C4),
          help        = STRING_TOKEN(STR_PEP_I2C_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C5] == 0;
        oneof varid   = SETUP_DATA.PepI2c5,
          prompt      = STRING_TOKEN(STR_PEP_I2C5),
          help        = STRING_TOKEN(STR_PEP_I2C_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C6] == 0;
        oneof varid   = SETUP_DATA.PepI2c6,
          prompt      = STRING_TOKEN(STR_PEP_I2C6),
          help        = STRING_TOKEN(STR_PEP_I2C_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C7] == 0;
        oneof varid   = SETUP_DATA.PepI2c7,
          prompt      = STRING_TOKEN(STR_PEP_I2C7),
          help        = STRING_TOKEN(STR_PEP_I2C_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
      grayoutif ideqval PCH_SETUP.PchSerialIoSpi[SERIAL_IO_SPI0] == 0;
        oneof varid   = SETUP_DATA.PepSpi0,
          prompt      = STRING_TOKEN(STR_PEP_SPI0),
          help        = STRING_TOKEN(STR_PEP_SPI_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoSpi[SERIAL_IO_SPI1] == 0 ;
        oneof varid   = SETUP_DATA.PepSpi1,
          prompt      = STRING_TOKEN(STR_PEP_SPI1),
          help        = STRING_TOKEN(STR_PEP_SPI_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoSpi[SERIAL_IO_SPI2] == 0;
        oneof varid   = SETUP_DATA.PepSpi2,
          prompt      = STRING_TOKEN(STR_PEP_SPI2),
          help        = STRING_TOKEN(STR_PEP_SPI_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SETUP_DATA.PepXhci,
        prompt      = STRING_TOKEN(STR_PEP_XHCI),
        help        = STRING_TOKEN(STR_PEP_XHCI_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PchHdAudio == 0;
        oneof varid   = SETUP_DATA.PepAudio,
          prompt      = STRING_TOKEN(STR_PEP_AUDIO),
          help        = STRING_TOKEN(STR_PEP_AUDIO_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.PchScsEmmcEnabled == 0;
        oneof varid   = SETUP_DATA.PepEmmc,
          prompt      = STRING_TOKEN(STR_PEP_EMMC),
          help        = STRING_TOKEN(STR_PEP_EMMC_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.PchScsSdCardEnabled == 0;
        oneof varid   = SETUP_DATA.PepSdxc,
          prompt      = STRING_TOKEN(STR_PEP_SDXC),
          help        = STRING_TOKEN(STR_PEP_SDXC_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SETUP_DATA.PepCsme,
        prompt      = STRING_TOKEN(STR_PEP_CSME),
        help        = STRING_TOKEN(STR_PEP_CSME_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepGbe,
        prompt      = STRING_TOKEN(STR_PEP_GBE),
        help        = STRING_TOKEN(STR_PEP_GBE_HELP),
        //
        // EHL Override Start
        //
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        //
        // EHL Override End
        //
      endoneof;

      oneof varid   = SETUP_DATA.PepThc0,
        prompt      = STRING_TOKEN(STR_PEP_THC0),
        help        = STRING_TOKEN(STR_PEP_THC_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepThc1,
        prompt      = STRING_TOKEN(STR_PEP_THC1),
        help        = STRING_TOKEN(STR_PEP_THC_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepIsi,
        prompt      = STRING_TOKEN(STR_PEP_ISI),
        help        = STRING_TOKEN(STR_PEP_ISI_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepGbeTsn,
        prompt      = STRING_TOKEN(STR_PEP_GBETSN),
        help        = STRING_TOKEN(STR_PEP_GBETSN_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepPse,
        prompt      = STRING_TOKEN(STR_PEP_PSE),
        help        = STRING_TOKEN(STR_PEP_PSE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.PepPse == 0;
        oneof varid   = SETUP_DATA.PepPseTsn,
          prompt      = STRING_TOKEN(STR_PEP_PSE_GBE),
          help        = STRING_TOKEN(STR_PEP_PSE_GBE_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.PepPseDma,
          prompt      = STRING_TOKEN(STR_PEP_PSE_DMA),
          help        = STRING_TOKEN(STR_PEP_PSE_DMA_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.PepPsePwm,
          prompt      = STRING_TOKEN(STR_PEP_PSE_PWM),
          help        = STRING_TOKEN(STR_PEP_PSE_PWM_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.PepPseAdc,
          prompt      = STRING_TOKEN(STR_PEP_PSE_ADC),
          help        = STRING_TOKEN(STR_PEP_PSE_ADC_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.PepPseSpi,
          prompt      = STRING_TOKEN(STR_PEP_PSE_SPI),
          help        = STRING_TOKEN(STR_PEP_PSE_SPI_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.PepPseI2c,
          prompt      = STRING_TOKEN(STR_PEP_PSE_I2C),
          help        = STRING_TOKEN(STR_PEP_PSE_I2C_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.PepPseUart,
          prompt      = STRING_TOKEN(STR_PEP_PSE_UART),
          help        = STRING_TOKEN(STR_PEP_PSE_UART_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.PepPseI2s,
          prompt      = STRING_TOKEN(STR_PEP_PSE_I2S),
          help        = STRING_TOKEN(STR_PEP_PSE_I2S_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.PepPseGpio,
          prompt      = STRING_TOKEN(STR_PEP_PSE_GPIO),
          help        = STRING_TOKEN(STR_PEP_PSE_GPIO_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.PepPseCan,
          prompt      = STRING_TOKEN(STR_PEP_PSE_CAN),
          help        = STRING_TOKEN(STR_PEP_PSE_CAN_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.PepPseQep,
          prompt      = STRING_TOKEN(STR_PEP_PSE_QEP),
          help        = STRING_TOKEN(STR_PEP_PSE_QEP_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

endform; // PEP_CONFIG_FORM_ID
