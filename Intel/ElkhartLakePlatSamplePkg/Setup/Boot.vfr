/** @file
  Setup script for the "Boot" top level setup screen

@copyright
  INTEL CONFIDENTIAL
  Copyright 2012 - 2019 Intel Corporation.

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.

  This file contains a 'Sample Driver' and is licensed as such under the terms
  of your license agreement with Intel or your vendor. This file may be modified
  by the user, subject to the additional terms of the license agreement.

@par Specification Reference:
**/

#include <SetupPrivate.h>
#include <OemSetup.h>
#include <SetupConfiguration.h>
#include <PlatformBoardId.h>
#include <PlatformBoardType.h>
#include <Guid/GlobalVariable.h>
#include <BootTime.h>

typedef struct{
  UINT8   SecureBoot;
} SECURE_BOOT_VARIABLE;

formset guid = BOOT_FORM_SET_GUID,
  title      = STRING_TOKEN(STR_BOOT),
  help       = STRING_TOKEN(STR_BOOT_HELP),
  classguid  = BOOT_MAINTENANCE_GUID,
  class      = BOOT_FORM_SET_CLASS,
  subclass   = 0,

  SETUP_DATA_VARSTORE

  varstore BOOTTIME_SETUP,
    varid = AUTO_ID(BOOTTIME_SETUP_KEY),
    name  = BootTime,
    guid  = SETUP_GUID;

  varstore SECURE_BOOT_VARIABLE,
    varid = AUTO_ID(SECURE_BOOT_VARIABLE_KEY),
    name  = SecureBoot,
    guid  = EFI_GLOBAL_VARIABLE;

  varstore SETUP_VOLATILE_DATA,
    varid = AUTO_ID(SETUP_VOLATILE_DATA_ID),
    name  = SetupVolatileData,
    guid  = SETUP_GUID;

  defaultstore MyStandardDefault,
    prompt    = STRING_TOKEN(STR_STANDARD_DEFAULT_PROMPT),
    attribute = 0x0000; // Default ID: 0000 standard default

  form formid = AUTO_ID(BOOT_MAIN),
    title     = STRING_TOKEN(STR_BOOT_CFG_MENU);

    SUBTITLE(STRING_TOKEN(STR_BOOT_CFG))

    //
    // For BootTime and CSM On/Off items
    //
    checkbox varid = BOOTTIME_SETUP.BootTime,
      prompt       = STRING_TOKEN(STR_ENABLE_BOOTTIME),
      help         = STRING_TOKEN(STR_ENABLE_BOOTTIME_HELP),
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;

    grayoutif ideqval SETUP_VOLATILE_DATA.TbtVtdBaseSecurityGrayOut == 1;
      suppressif TRUE;
        oneof varid   = SETUP_DATA.CsmControl,
          prompt      = STRING_TOKEN(STR_CSM_CONTROL_PROMPT),
          help        = STRING_TOKEN(STR_CSM_CONTROL_HELP),
          option text = STRING_TOKEN(STR_CSM_CONTROL_ALWAYS_ON),         value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_CSM_CONTROL_ALWAYS_OFF),        value = 1, flags = RESET_REQUIRED | DEFAULT;
          option text = STRING_TOKEN(STR_CSM_CONTROL_DETECT_LEGACY_VGA), value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif; //TbtVtdBaseSecurityGrayOut

    SEPARATOR

    suppressif ideqval SETUP_DATA.FastBoot == 1;
      oneof varid   = SETUP_DATA.DisplayBootMode,
        prompt      = STRING_TOKEN (STR_DISPLAY_BOOT_MODE),
        help        = STRING_TOKEN (STR_DISPLAY_BOOT_MODE_HELP),
        option text = STRING_TOKEN (STR_NORMAL_BOOT), value = 0, flags = DEFAULT;
        option text = STRING_TOKEN (STR_QUIET_BOOT), value = 1, flags = 0;
        option text = STRING_TOKEN (STR_SILENT_BOOT), value = 2, flags = 0;
      endoneof;
    endif; // suppressif

    suppressif ideqval SETUP_DATA.FastBoot == 0;
      grayoutif TRUE;
        oneof varid   = SETUP_DATA.DisplayBootMode,
          prompt      = STRING_TOKEN (STR_DISPLAY_BOOT_MODE),
          help        = STRING_TOKEN (STR_DISPLAY_BOOT_MODE_HELP),
          option text = STRING_TOKEN (STR_SILENT_BOOT), value = 0, flags = DEFAULT;
          option text = STRING_TOKEN (STR_SILENT_BOOT), value = 1, flags = 0;
          option text = STRING_TOKEN (STR_SILENT_BOOT), value = 2, flags = 0;
        endoneof;
    SUPPRESS_GRAYOUT_ENDIF


    oneof varid   = SETUP_DATA.FastBoot,
      prompt      = STRING_TOKEN(STR_FAST_BOOT),
      help        = STRING_TOKEN(STR_FAST_BOOT_HELP),
#if FixedPcdGetBool(PcdPerformanceEnable) == 1
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | RESET_REQUIRED;
#else
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
#endif
    endoneof;

    suppressif ideqval SETUP_DATA.FastBoot == 0;
      oneof varid   = SETUP_DATA.FastBootWdt,
        prompt      = STRING_TOKEN(STR_FAST_BOOT_WDT),
        help        = STRING_TOKEN(STR_FAST_BOOT_WDT_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.SkipHIIUpdate,
        prompt      = STRING_TOKEN(STR_FAST_BOOT_SKIP_HII),
        help        = STRING_TOKEN(STR_FAST_BOOT_SKIP_HII_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.ConInBehavior,
        prompt      = STRING_TOKEN(STR_FAST_BOOT_CONSOLE_BHVR),
        help        = STRING_TOKEN(STR_FAST_BOOT_CONIN_BHVR_HELP),
#if FixedPcdGetBool(PcdPerformanceEnable) == 1
        option text = STRING_TOKEN(STR_PS2_CONSOLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_LASTCONSOLE), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_WINDOWS_CONSOLE), value = 2, flags =  DEFAULT | RESET_REQUIRED;
#else
        option text = STRING_TOKEN(STR_PS2_CONSOLE), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_LASTCONSOLE), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_WINDOWS_CONSOLE), value = 2, flags = RESET_REQUIRED;
#endif
      endoneof;
    endif; // suppressif

    checkbox varid = SETUP_DATA.LazyConIn,
      prompt       = STRING_TOKEN(STR_LAZY_CONIN),
      help         = STRING_TOKEN(STR_LAZY_CONIN),
    endcheckbox;

#ifdef VIRTUAL_KEYBOARD_ENABLE_FLAG
    oneof varid   = SETUP_DATA.VirtualKeyboard,
      prompt      = STRING_TOKEN(STR_VIRTUAL_KEYBOARD),
      help        = STRING_TOKEN(STR_VIRTUAL_KEYBOARD_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;
#endif // VIRTUAL_KEYBOARD_ENABLE_FLAG

    oneof varid     = SETUP_DATA.BootFirstToShell,
      prompt        = STRING_TOKEN(STR_BOOT_FIRST_TO_SHELL),
      help          = STRING_TOKEN(STR_BOOT_FIRST_TO_SHELL_HELP),
      default value = 0, defaultstore = MyStandardDefault,
      option text   = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text   = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED; 
    endoneof;

  endform;

endformset;
