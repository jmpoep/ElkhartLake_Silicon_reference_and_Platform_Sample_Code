/** @file

@copyright
  INTEL CONFIDENTIAL
  Copyright 2018 - 2020 Intel Corporation.

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.

  This file contains a 'Sample Driver' and is licensed as such under the terms
  of your license agreement with Intel or your vendor. This file may be modified
  by the user, subject to the additional terms of the license agreement.

@par Specification
**/

form formid = AUTO_ID(TCC_MODE_CONFIG_FORM_ID),
  title     = STRING_TOKEN(STR_TCC_MODE_CONFIG_FORM_TITLE);

  SUBTITLE(STRING_TOKEN(STR_TCC_MODE_CONFIG_FORM_TITLE))
  SEPARATOR

  oneof varid = SETUP_DATA.TccMode,
    questionid = AUTO_ID (KEY_TCC_MODE),
    prompt   = STRING_TOKEN(STR_TCC_MODE_PROMPT),
    help     = STRING_TOKEN(STR_TCC_MODE_HELP),
    flags    = INTERACTIVE,
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
  endoneof;

  SEPARATOR

  text
  help   = STRING_TOKEN(STR_TCC_AFFECTED_SETTINGS),
  text   = STRING_TOKEN(STR_TCC_AFFECTED_SETTINGS),
  flags  = 0,
  key    = 0;

  grayoutif ideqval SETUP_DATA.TccMode == 1;
    oneof varid = PCH_SETUP.PsfTccEnable,
      prompt   = STRING_TOKEN(STR_PSF_TCC_PROMPT),
      help     = STRING_TOKEN(STR_PSF_TCC_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;

  suppressif TRUE;
    goto
      formid      = CPU_FORM_ID,
      question    = AC_SPLIT_LOCK_QUESTION_ID,
      prompt      = STRING_TOKEN(STR_AC_SPLIT_LOCK_PROMPT),
      help        = STRING_TOKEN(STR_AC_SPLIT_LOCK_HELP);
  endif;

  goto
    formid      = CPU_POWER_CONFIG_FORM_ID,
    question    = CX_ENABLE_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_CX_PROMPT),
    help        = STRING_TOKEN(STR_CX_PROMPT_HELP);

  goto
    formid      = CPU_POWER_CONFIG_FORM_ID,
    question    = HWP_ENABLE_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_CPU_ISST_PROMPT),
    help        = STRING_TOKEN(STR_CPU_ISST_HELP);

  suppressif ((ideqval SETUP_CPU_FEATURES.HwpAvailable == 0)
                OR (ideqval SETUP_CPU_FEATURES.ItbmAvailable == 0));
    goto
      formid      = CPU_POWER_CONFIG_FORM_ID,
      question    = ITBM_ENABLE_QUESTION_ID,
      prompt      = STRING_TOKEN(STR_CPU_ITBM_PROMPT),
      help        = STRING_TOKEN(STR_CPU_ITBM_HELP);
  endif;

  suppressif ideqval SETUP_CPU_FEATURES.EISTAvailable == 0;
    goto
      formid      = CPU_POWER_CONFIG_FORM_ID,
      question    = ENABLE_GV_QUESTION_ID,
      prompt      = STRING_TOKEN(STR_CPU_IST_PROMPT),
      help        = STRING_TOKEN(STR_CPU_IST_HELP);
  endif;

  suppressif ideqval SETUP_CPU_FEATURES.VTAvailable == 0;
    goto
      formid      = CPU_FORM_ID,
      question    = VT_QUESTION_ID,
      prompt      = STRING_TOKEN(STR_VT_PROMPT),
      help        = STRING_TOKEN(STR_VT_PROMPT_HELP);
  endif;

  goto
    formid      = RTD3_FORM_ID,
    question    = RTD3_SUPPORT_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_RTD3),
    help        = STRING_TOKEN(STR_RTD3_HELP);

  goto
    formid      = ACPI_FORM_ID,
    question    = KEY_LOW_POWER_S0_IDLE,
    prompt      = STRING_TOKEN(STR_LOW_POWER_S0_IDLE),
    help        = STRING_TOKEN(STR_LOW_POWER_S0_IDLE_HELP);

  goto
    formid      = MEMORY_FORM_ID,
    question    = SA_GV_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_SA_GV_PROMPT),
    help        = STRING_TOKEN(STR_SA_GV_HELP);

  goto
    formid      = MEMORY_FORM_ID,
    question    = PAGE_IDLE_TIMEOUT_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_PAGE_IDLE_TIMEOUT_PROMPT),
    help        = STRING_TOKEN(STR_PAGE_IDLE_TIMEOUT_HELP);

  goto
    formid      = MEMORY_RAPL_FORM_ID,
    question    = RAPLLIM1_ENABLE_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_RAPLLIM1ENA_PROMPT),
    help        = STRING_TOKEN(STR_RAPLLIM1ENA_HELP);

  goto
    formid      = MEMORY_RAPL_FORM_ID,
    question    = RAPLLIM2_ENABLE_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_RAPLLIM2ENA_PROMPT),
    help        = STRING_TOKEN(STR_RAPLLIM2ENA_HELP);

  goto
    formid      = MEMORY_FORM_ID,
    question    = POWER_DOWN_MODE_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_POWER_DOWN_MODE_PROMPT),
    help        = STRING_TOKEN(STR_POWER_DOWN_MODE_HELP);

  goto
    formid      = GT_POWER_CONFIG_FORM_ID,
    question    = VIDEO_RS2_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_VIDEO_RS2_PROMPT),
    help        = STRING_TOKEN(STR_VIDEO_RS2_HELP);

  goto
    formid      = IGFX_FORM_ID,
    question    = SA_PM_SUPPORT_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_PM_SUPPORT),
    help        = STRING_TOKEN(STR_PM_SUPPORT_HELP);


  goto
    formid      = NB_FORM_ID,
    question    = SA_VTD_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_SA_VTD_PROMPT),
    help        = STRING_TOKEN(STR_SA_VTD_HELP);

  goto
    formid      = SB_FORM_ID,
    question    = PCH_LEGACY_IO_LOW_LATENCY_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_PCH_LEGACY_IO_LOW_LATENCY),
    help        = STRING_TOKEN(STR_PCH_LEGACY_IO_LOW_LATENCY_HELP);

  goto
    formid      = TSN_GBE_OPTIONS_FORM_ID,
    question    = PCH_TSN_GBE_MULTI_VC_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_PCH_TSN_GBE_MULTI_VC),
    help        = STRING_TOKEN(STR_TSN_GBE_MULTI_VC_HELP);

  goto
    formid      = TSN_GBE_OPTIONS_FORM_ID,
    question    = PSE_TSN_GBE0_MULTI_VC_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_PSE_TSN_GBE0_MULTI_VC),
    help        = STRING_TOKEN(STR_PSE_TSN_GBE_MULTI_VC_HELP);

  goto
    formid      = TSN_GBE_OPTIONS_FORM_ID,
    question    = PSE_TSN_GBE1_MULTI_VC_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_PSE_TSN_GBE1_MULTI_VC),
    help        = STRING_TOKEN(STR_PSE_TSN_GBE_MULTI_VC_HELP);

  goto
    formid      = PCIE_DEVICE_OPTIONS_FORM_ID,
    question    = PCH_DMI_ASPM_QUESTION_ID,
    prompt      = STRING_TOKEN(STR_PCH_DMI_ASPM_PROMPT),
    help        = STRING_TOKEN(STR_PCH_DMI_ASPM_HELP);

  #define PORT_INDEX 0
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 1
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 2
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 3
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 4
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 5
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 6
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 7
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 8
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 9
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 10
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 11
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 12
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 13
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 14
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 15
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 16
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 17
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 18
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 19
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 20
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 21
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 22
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

  #define PORT_INDEX 23
  #include "TccPcieSetup.hfr"
  #undef PORT_INDEX

endform;
