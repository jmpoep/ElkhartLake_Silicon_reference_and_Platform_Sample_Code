/** @file

@copyright
  INTEL CONFIDENTIAL
  Copyright 2014 - 2020 Intel Corporation.

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.

  This file contains a 'Sample Driver' and is licensed as such under the terms
  of your license agreement with Intel or your vendor. This file may be modified
  by the user, subject to the additional terms of the license agreement.

@par Specification
**/

#include "SetupPreProcTools.hfr"

#define PLATFORM_POR        0
#define FORCE_ENABLE        1
#define FORCE_DISABLE       2

    // Define forms
    form formid = AUTO_ID(SB_FORM_ID),
    title       = STRING_TOKEN(STR_SB_FORM);

    SUBTITLE(STRING_TOKEN(STR_SB_FORM))
    SEPARATOR
    goto PCIE_DEVICE_OPTIONS_FORM_ID,
         prompt = STRING_TOKEN(STR_PCIE_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_PCIE_OPTIONS_FORM_HELP);

    goto SATA_DEVICE_OPTIONS_FORM_ID,
         prompt = STRING_TOKEN(STR_SATA_DEVICE_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_SATA_DEVICE_OPTIONS_FORM_HELP);

    goto USB_OPTIONS_FORM_ID,
         prompt = STRING_TOKEN(STR_USB_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_USB_OPTIONS_FORM_HELP);

    goto SECURITY_OPTIONS_FORM_ID,
         prompt = STRING_TOKEN(STR_SECURITY_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_SECURITY_OPTIONS_FORM_HELP);

    suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
        goto PCH_HDAUDIO_OPTIONS_FORM_ID,
             prompt = STRING_TOKEN(STR_HDAUDIO_OPTIONS_FORM_TITLE),
             help = STRING_TOKEN(STR_HDAUDIO_OPTIONS_FORM_HELP);
    endif;

    suppressif ideqval SETUP_VOLATILE_DATA.ThcSupported == 0x0;
      goto THC_OPTIONS_FORM_ID,
           prompt = STRING_TOKEN(STR_THC_OPTIONS_FORM_TITLE),
           help = STRING_TOKEN(STR_THC_OPTIONS_FORM_HELP);
    endif;

    goto 122, //SerialIo
         prompt = STRING_TOKEN(STR_SERIAL_IO_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_SERIAL_IO_OPTIONS_FORM_HELP);

    goto SCS_OPTIONS_FORM_ID,
         prompt = STRING_TOKEN(STR_SCS_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_SCS_OPTIONS_FORM_HELP);

    goto PSE_OPTIONS_FORM_ID,
         prompt = STRING_TOKEN(STR_PSE_OPTIONS_FORM_TITLE),
         help = STRING_TOKEN(STR_PSE_OPTIONS_FORM_HELP);

    goto PCH_THERMAL_THROTTLING_OPTIONS_FORM_ID,
        prompt   = STRING_TOKEN(STR_PCH_THERMAL_THROTTLING),
        help     = STRING_TOKEN(STR_PCH_THERMAL_THROTTLING),
        flags   = 0,
        key     = 0;

    goto FIVR_CONFIGURATION_FORM_ID,
        prompt = STRING_TOKEN(STR_PCH_FIVR_CONFIGURATION_FORM_TITLE),
        help   = STRING_TOKEN(STR_PCH_FIVR_CONFIGURATION_FORM_HELP);

    goto PCH_FIA_OPTIONS_FORM_ID,
        prompt   = STRING_TOKEN(STR_PCH_FIA_OPTIONS_FORM_TITLE),
        help     = STRING_TOKEN(STR_PCH_FIA_OPTIONS_FORM_HELP);

    suppressif ideqval SETUP_VOLATILE_DATA.TsnSupportByPch == 0;
      goto TSN_GBE_OPTIONS_FORM_ID,
          prompt   = STRING_TOKEN(STR_TSN_GBE_OPTIONS_FORM_TITLE),
          help     = STRING_TOKEN(STR_TSN_GBE_OPTIONS_FORM_HELP);
    endif;

    SEPARATOR

    oneof varid = PCH_SETUP.PchMasterClockGating,
     prompt   = STRING_TOKEN(STR_PCH_MASTER_CLOCK_GATING_CONFIG),
     help     = STRING_TOKEN(STR_PCH_MASTER_CLOCK_GATING_CONFIG),
     option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
     option text = STRING_TOKEN(STR_DEFAULT), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.PchMasterPowerGating,
     prompt   = STRING_TOKEN(STR_PCH_MASTER_POWER_GATING_CONFIG),
     help     = STRING_TOKEN(STR_PCH_MASTER_POWER_GATING_CONFIG),
     option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
     option text = STRING_TOKEN(STR_DEFAULT), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;


    SEPARATOR
    suppressif ideqval SETUP_VOLATILE_DATA.GbeSupportByPch == 0;
      //
      // GbE Region present
      //
      suppressif ideqval SETUP_VOLATILE_DATA.GbeAvailable == 0;
        oneof varid = PCH_SETUP.PchLan,
          prompt   = STRING_TOKEN(STR_GBE_CONTROLLER),
          help     = STRING_TOKEN(STR_GBE_CONTROLLER_HELP),
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.PchLan == 0 OR ideqval SETUP_VOLATILE_DATA.GbeAvailable == 0;

        oneof varid = PCH_SETUP.LanWakeFromDeepSx,
          prompt   = STRING_TOKEN(STR_GBE_WAKE_WFDSX_PROMPT),
          help     = STRING_TOKEN(STR_GBE_WAKE_WFDSX_HELP),
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        endoneof;

        oneof varid = PCH_SETUP.PchWakeOnLan,
          prompt   = STRING_TOKEN(STR_GBE_WOL_PROMPT),
          help     = STRING_TOKEN(STR_GBE_WOL_HELP),
          //
          // The default setup option has been changed from Disabled to Enabled to sync with Greens Glacier and to fix the
          // SelfTest error LPC Controller (Bus 0 Dev 31 Fun 0) 0A4[8]
          //
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        endoneof;

        oneof varid = PCH_SETUP.SlpLanLowDc,
          prompt   = STRING_TOKEN(STR_PCH_SLP_LAN_LOW_DC_PROMPT),
          help     = STRING_TOKEN(STR_PCH_SLP_LAN_LOW_DC_HELP),
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        endoneof;

        oneof varid = SETUP_DATA.EfiNetworkSupport,
          prompt   = STRING_TOKEN(STR_EFI_NETWORK_CONTROL),
          help     = STRING_TOKEN(STR_EFI_NETWORK_CONTROL_HELP),
          option text = STRING_TOKEN(STR_EFI_NETWORK_ONBOARD_NIC), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EFI_NETWORK_WIFI), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EFI_NETWORK_ALL), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
        endoneof;
      endif;

      //
      // GbE Region not available
      //
      suppressif ideqval SETUP_VOLATILE_DATA.GbeAvailable == 1;
        text
          help   = STRING_TOKEN(STR_EMPTY_STRING),
          text   = STRING_TOKEN(STR_GBE_CONTROLLER),
          text   = STRING_TOKEN(STR_GBE_NOT_PRESENT),
          flags  = 0,
          key    = 0;
      endif;
    endif;

     suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorMobile AND
                NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorEmbedded;
      oneof varid = SETUP_DATA.SensorHubType,
       prompt   = STRING_TOKEN(STR_SENSOR_HUB_TYPE),
       help     = STRING_TOKEN(STR_SENSOR_HUB_TYPE_HELP),
       option text = STRING_TOKEN(STR_NONE_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(STR_I2C_SENSOR_HUB_STRING), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_USB_SENSOR_HUB_STRING), value = 2, flags = RESET_REQUIRED;
      endoneof;
      endif;

    oneof varid = PCH_SETUP.DeepSxMode,
      prompt   = STRING_TOKEN(STR_DEEP_SX_POWER_POLICIES_PROMPT),
      help     = STRING_TOKEN(STR_DEEP_SX_POWER_POLICIES_HELP),
       option text = STRING_TOKEN(STR_DISABLED),                    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorDesktop OR
                  ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer OR
                  ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorWorkstation;
         option text = STRING_TOKEN(STR_DEEPSX_S4_S5_BATT_STRING),    value = 3, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(STR_DEEPSX_S5_BATT_STRING),       value = 1, flags = RESET_REQUIRED;
       endif
       option text = STRING_TOKEN(STR_DEEPSX_S4_S5_STRING),         value = 4, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_DEEPSX_S5_STRING),            value = 2, flags = RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorDesktop;
      oneof varid = PCH_SETUP.PsOnEnable,
          prompt   = STRING_TOKEN(STR_PS_ON_ENABLE_PROMPT),
          help     = STRING_TOKEN(STR_PS_ON_ENABLE_HELP),
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid = PCH_SETUP.PchWakeOnWlan,
        prompt   = STRING_TOKEN(STR_PCH_WOWLAN_PROMPT),
        help     = STRING_TOKEN(STR_PCH_WOWLAN_HELP),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PchWakeOnWlan == 0;
      oneof varid = PCH_SETUP.PchWakeOnWlanDeepSx,
          prompt   = STRING_TOKEN(STR_PCH_WOWLANDEEPSX_PROMPT),
          help     = STRING_TOKEN(STR_PCH_WOWLANDEEPSX_HELP),
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid = PCH_SETUP.DisableDsxAcPresentPulldown,
        prompt   = STRING_TOKEN(STR_DISABLE_DSX_ACPRESENT_PD_PROMPT),
        help     = STRING_TOKEN(STR_DISABLE_DSX_ACPRESENT_PD_HELP),
        default     = 0, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    endoneof;


    oneof varid = SETUP_DATA.PxeRom,
      prompt   = STRING_TOKEN(STR_PCH_PXEROM_CONTROL),
      help     = STRING_TOKEN(STR_PCH_PXEROM_CONTROL_HELP),
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
    endoneof;

    //
    // This is used to configure the HPET default setting.
    // It's not showed in setup menu since the HPET should be always enabled in INTEL platform.
    //
    suppressif TRUE;
    oneof varid = PCH_SETUP.Hpet,
      prompt   = STRING_TOKEN(STR_HPET_PROMPT),
      help     = STRING_TOKEN(STR_HPET_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    endif;

    oneof varid  = PCH_SETUP.StateAfterG3,
      prompt   = STRING_TOKEN(STR_STATE_AFTER_G3),
      help     = STRING_TOKEN(STR_STATE_AFTER_G3_HELP),
      option text   = STRING_TOKEN(STR_S0_AFTER_G3_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text   = STRING_TOKEN(STR_S5_AFTER_G3_STRING), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.IchPort80Route,
      prompt   = STRING_TOKEN(PORT_80_REDIRECT),
      help     = STRING_TOKEN(PORT_80_REDIRECT_HELP),
      option text = STRING_TOKEN(STR_LPC_BUS), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_BUS), value = 1, flags = RESET_REQUIRED;
    endoneof;

    grayoutif NOT ideqval PCH_SETUP.IchPort80Route == 0;
      oneof varid = PCH_SETUP.EnhancePort8xhDecoding,
        prompt   = STRING_TOKEN(ENHANCE_PORT_80_DECODING),
        help     = STRING_TOKEN(ENHANCE_PORT_80_DECODING_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    grayoutif ideqval SETUP_VOLATILE_DATA.PchCridSupport == 0;
      oneof varid  = PCH_SETUP.PchCrid,
        prompt   = STRING_TOKEN(STR_PCH_CRID_PROMPT),
        help     = STRING_TOKEN(STR_PCH_CRID_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    grayoutif ideqval SETUP_DATA.TccMode == 1;
      oneof varid  = PCH_SETUP.PchLegacyIoLowLatency,
        questionid  = AUTO_ID(PCH_LEGACY_IO_LOW_LATENCY_QUESTION_ID),
        prompt      = STRING_TOKEN(STR_PCH_LEGACY_IO_LOW_LATENCY),
        help        = STRING_TOKEN(STR_PCH_LEGACY_IO_LOW_LATENCY_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid  = PCH_SETUP.PchCrossThrottling,
      prompt   = STRING_TOKEN(STR_PCH_CROSS_THROTTLING_PROMPT),
      help     = STRING_TOKEN(STR_PCH_CROSS_THROTTLING_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchEnergyReport,
      prompt   = STRING_TOKEN(STR_PCH_ENERGY_REPORTING_PROMPT),
      help     = STRING_TOKEN(STR_PCH_ENERGY_REPORTING_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PmcLpmS0i2p0En,
      prompt   = STRING_TOKEN(STR_PMC_LPM_S0I2P0_EN_PROMPT),
      help     = STRING_TOKEN(STR_PMC_LPM_S0IX_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PmcLpmS0i2p1En,
      prompt   = STRING_TOKEN(STR_PMC_LPM_S0I2P1_EN_PROMPT),
      help     = STRING_TOKEN(STR_PMC_LPM_S0IX_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PmcLpmS0i2p2En,
      prompt   = STRING_TOKEN(STR_PMC_LPM_S0I2P2_EN_PROMPT),
      help     = STRING_TOKEN(STR_PMC_LPM_S0IX_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PmcLpmS0i3p0En,
      prompt   = STRING_TOKEN(STR_PMC_LPM_S0I3P0_EN_PROMPT),
      help     = STRING_TOKEN(STR_PMC_LPM_S0IX_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PmcLpmS0i3p1En,
      prompt   = STRING_TOKEN(STR_PMC_LPM_S0I3P1_EN_PROMPT),
      help     = STRING_TOKEN(STR_PMC_LPM_S0IX_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PmcLpmS0i3p2En,
      prompt   = STRING_TOKEN(STR_PMC_LPM_S0I3P2_EN_PROMPT),
      help     = STRING_TOKEN(STR_PMC_LPM_S0IX_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PmcLpmS0i3p3En,
      prompt   = STRING_TOKEN(STR_PMC_LPM_S0I3P3_EN_PROMPT),
      help     = STRING_TOKEN(STR_PMC_LPM_S0IX_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PmcLpmS0i3p4En,
      prompt   = STRING_TOKEN(STR_PMC_LPM_S0I3P4_EN_PROMPT),
      help     = STRING_TOKEN(STR_PMC_LPM_S0IX_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;


    oneof varid  = PCH_SETUP.IehMode,
      prompt   = STRING_TOKEN(STR_PCH_IEH_MODE_PROMPT),
      help     = STRING_TOKEN(STR_PCH_IEH_MODE_HELP),
      option text = STRING_TOKEN(STR_BYPASS_MODE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.EnableTcoTimer,
      prompt      = STRING_TOKEN(STR_ENABLE_TCO_TIMER),
      help        = STRING_TOKEN(STR_ENABLE_TCO_TIMER_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.EnableTimedGpio0,
      prompt      = STRING_TOKEN(STR_ENABLE_TIMED_GPIO0),
      help        = STRING_TOKEN(STR_ENABLE_TIMED_GPIO0_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.EnableTimedGpio1,
      prompt      = STRING_TOKEN(STR_ENABLE_TIMED_GPIO1),
      help        = STRING_TOKEN(STR_ENABLE_TIMED_GPIO1_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.PciePllSsc,
      prompt   = STRING_TOKEN(STR_PCIE_PLL_SSC_PROMPT),
      help     = STRING_TOKEN(STR_PCIE_PLL_SSC_HELP),
      option text = STRING_TOKEN(STR_AUTO_STRING), value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ZERO_PERCENT), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ZERO_PT_1_PERCENT), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ZERO_PT_2_PERCENT), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ZERO_PT_3_PERCENT), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ZERO_PT_4_PERCENT), value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ZERO_PT_5_PERCENT), value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ZERO_PT_6_PERCENT), value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ZERO_PT_7_PERCENT), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ZERO_PT_8_PERCENT), value = 8, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ZERO_PT_9_PERCENT), value = 9, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ONE_PT_0_PERCENT), value = 10, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ONE_PT_1_PERCENT), value = 11, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ONE_PT_2_PERCENT), value = 12, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ONE_PT_3_PERCENT), value = 13, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ONE_PT_4_PERCENT), value = 14, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ONE_PT_5_PERCENT), value = 15, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ONE_PT_6_PERCENT), value = 16, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ONE_PT_7_PERCENT), value = 17, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ONE_PT_8_PERCENT), value = 18, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ONE_PT_9_PERCENT), value = 19, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_TWO_PT_0_PERCENT), value = 20, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_PLL_SSCEN_DISABLE), value = 0xFE, flags = RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == TypeUltUlx AND
               NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
      oneof varid   = PCH_SETUP.PchIoApic24119Entries,
        prompt      = STRING_TOKEN(STR_IOAPIC_24_119_ENTRIES),
        help        = STRING_TOKEN(STR_IOAPIC_24_119_ENTRIES_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid   = PCH_SETUP.Enable8254ClockGating,
      prompt      = STRING_TOKEN(STR_ENABLE_8254_CLOCK_GATE),
      help        = STRING_TOKEN(STR_ENABLE_8254_CLOCK_GATE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE_8254_CLOCK_GATE_RUNTIME), value = 2, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSidebandLock,
      prompt      = STRING_TOKEN(STR_PCH_SB_LOCK),
      help        = STRING_TOKEN(STR_PCH_SB_LOCK_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.FprrEnable,
      prompt      = STRING_TOKEN(STR_FPRR_ENABLE),
      help        = STRING_TOKEN(STR_FPRR_ENABLE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SmbusSpdWriteDisable,
      prompt      = STRING_TOKEN(STR_SMBUS_SPDWDIS),
      help        = STRING_TOKEN(STR_SMBUS_SPDWDIS_HELP),
      option text = STRING_TOKEN(STR_TRUE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_FALSE), value = 0, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchEspiLgmrEnable,
      prompt      = STRING_TOKEN(STR_PCH_ESPI_LGMR_PROMPT),
      help        = STRING_TOKEN(STR_PCH_ESPI_LGMR_HELP),
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchEspiHostC10ReportEnable,
      prompt      = STRING_TOKEN(STR_PCH_ESPI_HOSTC10_PROMPT),
      help        = STRING_TOKEN(STR_PCH_ESPI_HOSTC10_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;


    oneof varid = PCH_SETUP.PchS0ixAutoDemotion,
        prompt   = STRING_TOKEN(STR_PCH_S0IX_AUTO_DEMOTION_PROMPT),
        help     = STRING_TOKEN(STR_PCH_S0IX_AUTO_DEMOTION_HELP),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.PmcGrTscEnable,
        prompt   = STRING_TOKEN(STR_PCH_GR_TSC_EN_PROMPT),
        help     = STRING_TOKEN(STR_PCH_GR_TSC_EN_HELP),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchLatchEventsC10Exit,
        prompt      = STRING_TOKEN(STR_PCH_LATCH_EVENTS_C10_EXIT_PROMPT),
        help        = STRING_TOKEN(STR_PCH_LATCH_EVENTS_C10_EXIT_PROMPT_HELP),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.V1p05PhyExtFetControlEnable,
      prompt   = STRING_TOKEN(STR_PCH_FIVR_V1P05_PHY_EXT_FET),
      help     = STRING_TOKEN(STR_PCH_FIVR_V1P05_PHY_EXT_FET_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.V1p05IsExtFetControlEnable,
      prompt   = STRING_TOKEN(STR_PCH_FIVR_V1P05_PHY_IS_EXT_FET),
      help     = STRING_TOKEN(STR_PCH_FIVR_V1P05_PHY_IS_EXT_FET_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    grayoutif ideqval PCH_SETUP.PchPseJtagPinMux == 1;
      oneof varid  = PCH_SETUP.SciPinMuxEnable,
        prompt   = STRING_TOKEN(STR_PCH_SCI_PIN_MUX),
        help     = STRING_TOKEN(STR_PCH_SCI_PIN_MUX_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    endform;

  form formid   = AUTO_ID(PCIE_DEVICE_OPTIONS_FORM_ID),
    title         = STRING_TOKEN(STR_PCIE_OPTIONS_FORM_TITLE);

    SUBTITLE(STRING_TOKEN(STR_PCIE_OPTIONS_FORM_TITLE))
    SEPARATOR

    grayoutif ideqval SETUP_DATA.TccMode == 1;
      oneof varid     = PCH_SETUP.PchDmiAspm,
          questionid  = AUTO_ID(PCH_DMI_ASPM_QUESTION_ID),
          prompt      = STRING_TOKEN(STR_PCH_DMI_ASPM_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DMI_ASPM_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING), value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_PCIE_LAN_PROMPT),
      text   = STRING_TOKEN(STR_PCIE_LAN_VALUE),
      flags = 0, key = 0;

    oneof varid   = PCH_SETUP.PcieRootPort8xhDecode,
      prompt      = STRING_TOKEN(STR_PCH_PCIE_PORT8XH_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_PORT8XH_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPort8xhDecode == 0;
      numeric varid = PCH_SETUP.Pcie8xhDecodePortIndex,
        prompt      = STRING_TOKEN (STR_PCH_PCIE_PORT8XH_PORT_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_PORT8XH_PORT_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 23,
        step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default     = 0,    // PCIe Port0 as default
      endnumeric;
    endif;

    oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable,
      prompt      = STRING_TOKEN(STR_PCH_PCIE_PEERMEMORYWRITE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_PEERMEMORYWRITE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PcieComplianceTestMode,
      prompt      = STRING_TOKEN(STR_PCH_PCIE_COMPLIANCETEST_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_COMPLIANCETEST_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid     = PCH_SETUP.TestPcieClockGating,
        prompt      = STRING_TOKEN(STR_PCH_PCIE_CKG_PROMPT),
        help        = STRING_TOKEN(STR_PCH_PCIE_CKG_HELP),
        option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.RpFunctionSwap,
      prompt      = STRING_TOKEN(STR_PCIE_RP_SWAP),
      help        = STRING_TOKEN(STR_PCIE_RP_SWAP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;


    goto PCIE_EQ_SETTINGS_FORM_ID,
      prompt = STRING_TOKEN(STR_PCIE_EQ_SETTINGS_FORM_TITLE),
      help   = STRING_TOKEN(STR_PCIE_EQ_SETTINGS_FORM_HELP);
    SEPARATOR

//
// All strings used for PCIE are given as C preprocessor macros that concatenate string name and rootport number
// Tool that gathers string usage info from hfr files doesn't run preprocessor and can't find the new representation of strings
// To work around this problem, all such problematics strings are included in PchPcieStringPool file
//
#include "PchPcieStringPool.hfr"

#define PORT_INDEX 0
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 1
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 2
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 3
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 4
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 5
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 6
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 7
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 8
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 9
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 10
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 11
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 12
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 13
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 14
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 15
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 16
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 17
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 18
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 19
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 20
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 21
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 22
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX
#define PORT_INDEX 23
#include "PchPcieSetupSinglePortMenu.hfr"
#undef PORT_INDEX

  SEPARATOR
  goto PCH_PCIE_CLOCK_FORM_ID,
    prompt = STRING_TOKEN(STR_PCIE_CLOCK_FORM_TITLE),
    help   = STRING_TOKEN(STR_PCIE_CLOCK_FORM_HELP);

  endform; //End of PCIE_DEVICE_OPTIONS_FORM_ID

  form formid = AUTO_ID(USB_OPTIONS_FORM_ID),
    title     = STRING_TOKEN(STR_USB_OPTIONS_FORM_TITLE);

    SUBTITLE(STRING_TOKEN(STR_USB_OPTIONS_FORM_TITLE))
    SEPARATOR

    oneof varid   = PCH_SETUP.EnableComplianceMode,
      prompt      = STRING_TOKEN(STR_PCH_XHCI_COMPLIANCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_XHCI_COMPLIANCE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchXdciSupport,
      prompt      = STRING_TOKEN(STR_PCH_XDCI_SUPPORT_PROMPT),
      help        = STRING_TOKEN(STR_PCH_XDCI_SUPPORT_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchUsb2SusWellPgEnable,
      prompt      = STRING_TOKEN(STR_USB_USB2_SUS_PG_ENABLE),
      help        = STRING_TOKEN(STR_USB_USB2_SUS_PG_ENABLE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchUsb3LinkSpeed,
      prompt      = STRING_TOKEN(STR_USB_USB3_LINK_SPEED),
      help        = STRING_TOKEN(STR_USB_USB3_LINK_SPEED_HELP),
      option text = STRING_TOKEN(STR_USB_USB3_GEN1), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_USB_USB3_GEN2), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    SEPARATOR

    oneof varid   = PCH_SETUP.PchUsbPdoProgramming,
      prompt      = STRING_TOKEN(STR_USB_PDO_PROGRAMMING),
      help        = STRING_TOKEN(STR_USB_PDO_PROGRAMMING_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchUsbOverCurrentEnable,
      prompt      = STRING_TOKEN(STR_USB_OVERCURRENT),
      help        = STRING_TOKEN(STR_USB_OVERCURRENT_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchXhciOcLock,
      prompt      = STRING_TOKEN(STR_USB_OC_LOCK),
      help        = STRING_TOKEN(STR_USB_OC_LOCK_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    SEPARATOR

    //
    // Usb ports per-port disable control enable
    //
    oneof varid  = PCH_SETUP.PchUsbPortDisable,
      prompt   = STRING_TOKEN(STR_PCH_USB_PORT_TERM_PROMPT),
      help     = STRING_TOKEN(STR_PCH_USB_PORT_TERM_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_USB_PORT_TERM_PER_PORT), value = 1, flags = RESET_REQUIRED;
    endoneof;

    SEPARATOR



    //
    // USB Port Disable Override fields
    //
    suppressif ideqval PCH_SETUP.PchUsbPortDisable == 0x0;

      //
      // @note Make sure strings used in include for CONCATENATE macro are specified in separate HFR file and added in INF
      //
      #define PCH_SS_PORT_INDEX 0
      #include "PchUsbSingleSsPort.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 1
      #include "PchUsbSingleSsPort.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 2
      #include "PchUsbSingleSsPort.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 3
      #include "PchUsbSingleSsPort.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 4
      #include "PchUsbSingleSsPort.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 5
      #include "PchUsbSingleSsPort.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 6
      #include "PchUsbSingleSsPort.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 7
      #include "PchUsbSingleSsPort.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 8
      #include "PchUsbSingleSsPort.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 9
      #include "PchUsbSingleSsPort.hfr"
      #undef PCH_SS_PORT_INDEX

      #define PCH_HS_PORT_INDEX 0
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 1
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 2
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 3
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 4
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 5
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 6
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 7
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 8
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 9
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 10
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 11
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 12
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 13
      #include "PchUsbSingleHsPort.hfr"
      #undef PCH_HS_PORT_INDEX

    endif; // if PchUsbPortDisable == 0x0

    suppressif NOT ideqval SETUP_DATA.SensorHubType == 2;
    SEPARATOR
      oneof varid   = SETUP_DATA.UsbSensorHub,
        prompt      = STRING_TOKEN(STR_USB_SENSOR_HUB_SUPPORT),
        help        = STRING_TOKEN(STR_USB_SENSOR_HUB_SUPPORT_HELP),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    //
    // Usb ports per-port OTG enable
    //
    oneof varid  = PCH_SETUP.PchUsbOtgDisable,
      prompt   = STRING_TOKEN(STR_PCH_USB_OTG_PROMPT),
      help     = STRING_TOKEN(STR_PCH_USB_OTG_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_USB_PORT_TERM_PER_PORT), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PchUsbOtgDisable == 0x0;

      //
      // @note Make sure strings used in include for CONCATENATE macro are specified in separate HFR file and added in INF
      //
      #define PCH_HS_PORT_INDEX 0
      #include "PchUsbSingleHsPortOtg.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 1
      #include "PchUsbSingleHsPortOtg.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 2
      #include "PchUsbSingleHsPortOtg.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 3
      #include "PchUsbSingleHsPortOtg.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 4
      #include "PchUsbSingleHsPortOtg.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 5
      #include "PchUsbSingleHsPortOtg.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 6
      #include "PchUsbSingleHsPortOtg.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 7
      #include "PchUsbSingleHsPortOtg.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 8
      #include "PchUsbSingleHsPortOtg.hfr"
      #undef PCH_HS_PORT_INDEX
      #define PCH_HS_PORT_INDEX 9
      #include "PchUsbSingleHsPortOtg.hfr"
      #undef PCH_HS_PORT_INDEX

      #define PCH_SS_PORT_INDEX 0
      #include "PchUsbSingleSsPortOtg.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 1
      #include "PchUsbSingleSsPortOtg.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 2
      #include "PchUsbSingleSsPortOtg.hfr"
      #undef PCH_SS_PORT_INDEX
      #define PCH_SS_PORT_INDEX 3
      #include "PchUsbSingleSsPortOtg.hfr"
      #undef PCH_SS_PORT_INDEX

    endif;

    SEPARATOR

  endform; //end of USB_OPTIONS_FORM_ID


  form formid = AUTO_ID(SATA_DEVICE_OPTIONS_FORM_ID),
    title  = STRING_TOKEN(STR_SATA_DEVICE_OPTIONS_FORM_TITLE);  // note formid is a variable (for readability) (UINT16) - also added Form to the line to signify the Op-Code

    SUBTITLE(STRING_TOKEN(STR_SATA_DEVICE_OPTIONS_FORM_TITLE))
    SEPARATOR

    oneof varid = PCH_SETUP.PchSata,
        prompt   = STRING_TOKEN(STR_PCH_SATA_PROMPT),
        help     = STRING_TOKEN(STR_PCH_SATA_HELP),
        default  = 1, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PchSata == 0;
      oneof varid       = PCH_SETUP.SataInterfaceMode,
        prompt   = STRING_TOKEN(STR_SATA_MODE_SELECTION_PROMPT),
        help     = STRING_TOKEN(STR_SATA_MODE_SELECTION_HELP),
        option text = STRING_TOKEN(STR_SATA_AHCI),  value = SATA_MODE_AHCI, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        suppressif ideqval SETUP_VOLATILE_DATA.RstAvailable == 0 AND
                          ideqval SETUP_VOLATILE_DATA.RsteAvailable == 0;
          option text = STRING_TOKEN(STR_SATA_RAID),  value = SATA_MODE_RAID, flags = RESET_REQUIRED;
        endif
      endoneof;

      suppressif NOT ideqval PCH_SETUP.SataInterfaceMode == SATA_MODE_RAID;

        oneof varid = PCH_SETUP.SataRstInterrupt,
          prompt = STRING_TOKEN(STR_SATA_INTERRUPT_SELECTION_PROMPT),
          help = STRING_TOKEN(STR_SATA_INTERRUPT_SELECTION_HELP),
          option text = STRING_TOKEN(STR_INTERRUPT_MSIX), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_INTERRUPT_MSI), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_INTERRUPT_LEGACY), value = 2, flags = RESET_REQUIRED;
        endoneof;


        #include "RstStringPool.hfr"

        #define CR_INDEX 0
          #include "RstSingleCycleRouter.hfr"
        #undef CR_INDEX

        #define CR_INDEX 1
          #include "RstSingleCycleRouter.hfr"
        #undef CR_INDEX

        #define CR_INDEX 2
          #include "RstSingleCycleRouter.hfr"
        #undef CR_INDEX

        #define CR_INDEX 3
          #include "RstSingleCycleRouter.hfr"
        #undef CR_INDEX

        #define CR_INDEX 4
          #include "RstSingleCycleRouter.hfr"
        #undef CR_INDEX

        #define CR_INDEX 5
          #include "RstSingleCycleRouter.hfr"
        #undef CR_INDEX

      endif;

      oneof varid       = PCH_SETUP.SataPortMultiplier,
        prompt   = STRING_TOKEN(STR_SATA_PORT_MULTIPLIER_PROMPT),
        help     = STRING_TOKEN(STR_SATA_PORT_MULTIPLIER_HELP),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid       = PCH_SETUP.SataTestMode,
        prompt   = STRING_TOKEN(STR_SATA_TEST_MODE_PROMPT),
        help     = STRING_TOKEN(STR_SATA_TEST_MODE_HELP),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

    suppressif NOT ideqval PCH_SETUP.SataInterfaceMode == SATA_MODE_RAID;
      oneof varid = PCH_SETUP.RaidDeviceId,
        prompt   = STRING_TOKEN(STR_RAID_DEV_ID_PROMPT),
        help     = STRING_TOKEN(STR_RAID_DEV_ID_HELP),
        option text = STRING_TOKEN(STR_RAID_DEV_ID_CLIENT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_RAID_DEV_ID_ALTERNATE), value = 1, flags = RESET_REQUIRED;
        suppressif NOT ideqval SETUP_VOLATILE_DATA.RsteAvailable == 1;
          option text = STRING_TOKEN(STR_RAID_DEV_ID_SERVER), value = 2, flags = RESET_REQUIRED;
        endif;
      endoneof;
    endif;

    suppressif ideqvallist  PCH_SETUP.SataTestMode ==  SATA_TEST_MODE_ENABLE;
      goto PCH_SATA_SFMS_OPTIONS_FORM_ID,
        prompt = STRING_TOKEN(STR_SATA_SFMS_OPTIONS_FORM_TITLE),
        help = STRING_TOKEN(STR_SATA_SFMS_OPTIONS_FORM_HELP);

      oneof varid       = PCH_SETUP.SataSalp,
          prompt   = STRING_TOKEN(STR_SATA_AHCI_SALP),
          help     = STRING_TOKEN(STR_SATA_AHCI_SALP_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    SEPARATOR

    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_SATA0_STRING),
      text   = STRING_TOKEN(STR_SATA0_NAME),
      flags  = 0,
      key    = 0;

    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_SOFT_PRESERVE),
      text   = STRING_TOKEN(STR_SATA0_SOFT_PRESERVE_STATUS),
      flags  = 0,
      key    = 0;

    suppressif ideqvallist  PCH_SETUP.SataTestMode ==  SATA_TEST_MODE_ENABLE;
      oneof varid   = PCH_SETUP.SataPort[0],
        prompt      = STRING_TOKEN(STR_SATA_PORT_0),
        help        = STRING_TOKEN(STR_SATA_PORT_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval PCH_SETUP.SataExternal[0] == 1;
      oneof varid   = PCH_SETUP.SataHotPlug[0],
        prompt      = STRING_TOKEN(STR_SATA_HOTPLUG0),
        help        = STRING_TOKEN(STR_SATA_PORT_HOTPLUG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

     text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SATA_ESATA),
        text   = STRING_TOKEN(STR_SATA_HOTPLUG_SUPPORT),
        flags  = 0,
        key    = 0;
    endif;

    oneof varid   = PCH_SETUP.SataExternal[0],
      prompt      = STRING_TOKEN(STR_SATA_EXTERNAL),
      help        = STRING_TOKEN(STR_SATA_EXTERNAL_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.SataHotPlug[0] == 0
               OR ideqval SETUP_VOLATILE_DATA.SataMpsPresent[0] == 0;
      oneof varid   = PCH_SETUP.SataMechanicalSw[0],
        prompt      = STRING_TOKEN(STR_SATA_MECHANICAL_SW0),
        help        = STRING_TOKEN(STR_SATA_MECHANICAL_SW_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid   = PCH_SETUP.SataSpinUp[0],
      prompt      = STRING_TOKEN(STR_SATA_SPIN_UP0),
      help        = STRING_TOKEN(STR_SATA_SPIN_UP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SataType[0],
      prompt      = STRING_TOKEN(STR_SATA_TYPE0),
      help        = STRING_TOKEN(STR_SATA_TYPE_HELP),
      option text = STRING_TOKEN(STR_SATA_HDD_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_SATA_SSD_STRING), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.SataTopology[0],
       prompt = STRING_TOKEN(STR_SATA_TOPOLOGY0),
       help = STRING_TOKEN(STR_SATA_TOPOLOGY_HELP),
       option text = STRING_TOKEN(STR_SATA_UNKNOWN_TOPOLOGY_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_ISATA_STRING), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_DIRECT_CONNECT_STRING), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_FLEX_STRING), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_M2_STRING), value = 4, flags = RESET_REQUIRED;
endoneof;

    oneof varid   = PCH_SETUP.PxDevSlp[0],
      prompt      = STRING_TOKEN(STR_PCH_P0DEVSLP_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P0DEVSLP_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SataRxPolarity[0],
      prompt      = STRING_TOKEN(STR_PCH_P0RXPOL_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P0RXPOL_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.EnableDitoConfig[0],
      prompt      = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG0_PROMPT),
      help        = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    grayoutif ideqval PCH_SETUP.EnableDitoConfig[0] == 0;
      numeric varid = PCH_SETUP.DitoVal[0],
        prompt      = STRING_TOKEN(STR_PCH_DITO_VAL0_PROMPT),
        help        = STRING_TOKEN(STR_PCH_DITO_VAL_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 1023,
        step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default     = 625,  // 625 by default
      endnumeric;

      numeric varid   = PCH_SETUP.DmVal[0],
        prompt      = STRING_TOKEN(STR_PCH_DM_VAL0_PROMPT),
        help        = STRING_TOKEN(STR_PCH_DM_VAL_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default     = 15,    // 15 by default
      endnumeric;
    endif;

    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_SATA1_STRING),
      text   = STRING_TOKEN(STR_SATA1_NAME),
      flags  = 0,
      key    = 0;

    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_SOFT_PRESERVE),
      text   = STRING_TOKEN(STR_SATA1_SOFT_PRESERVE_STATUS),
      flags  = 0,
      key    = 0;

    suppressif ideqvallist  PCH_SETUP.SataTestMode ==  SATA_TEST_MODE_ENABLE;
      oneof varid   = PCH_SETUP.SataPort[1],
        prompt      = STRING_TOKEN(STR_SATA_PORT_1),
        help        = STRING_TOKEN(STR_SATA_PORT_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval PCH_SETUP.SataExternal[1] == 1;
      oneof varid   = PCH_SETUP.SataHotPlug[1],
        prompt      = STRING_TOKEN(STR_SATA_HOTPLUG1),
        help        = STRING_TOKEN(STR_SATA_PORT_HOTPLUG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SATA_ESATA),
        text   = STRING_TOKEN(STR_SATA_HOTPLUG_SUPPORT),
        flags  = 0,
        key    = 0;
    endif;

    oneof varid   = PCH_SETUP.SataExternal[1],
      prompt      = STRING_TOKEN(STR_SATA_EXTERNAL),
      help        = STRING_TOKEN(STR_SATA_EXTERNAL_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.SataHotPlug[1] == 0
              OR ideqval SETUP_VOLATILE_DATA.SataMpsPresent[1] == 0;
      oneof varid   = PCH_SETUP.SataMechanicalSw[1],
        prompt      = STRING_TOKEN(STR_SATA_MECHANICAL_SW1),
        help        = STRING_TOKEN(STR_SATA_MECHANICAL_SW_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid   = PCH_SETUP.SataSpinUp[1],
      prompt      = STRING_TOKEN(STR_SATA_SPIN_UP1),
      help        = STRING_TOKEN(STR_SATA_SPIN_UP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SataType[1],
      prompt      = STRING_TOKEN(STR_SATA_TYPE1),
      help        = STRING_TOKEN(STR_SATA_TYPE_HELP),
      option text = STRING_TOKEN(STR_SATA_HDD_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_SATA_SSD_STRING), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.SataTopology[1],
       prompt = STRING_TOKEN(STR_SATA_TOPOLOGY1),
       help = STRING_TOKEN(STR_SATA_TOPOLOGY_HELP),
       default = 0, defaultstore = MyStandardDefault,
       option text = STRING_TOKEN(STR_SATA_UNKNOWN_TOPOLOGY_STRING), value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_ISATA_STRING), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_DIRECT_CONNECT_STRING), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_FLEX_STRING), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_M2_STRING), value = 4, flags = RESET_REQUIRED;
endoneof;

    oneof varid   = PCH_SETUP.PxDevSlp[1],
      prompt      = STRING_TOKEN(STR_PCH_P1DEVSLP_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P1DEVSLP_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SataRxPolarity[1],
      prompt      = STRING_TOKEN(STR_PCH_P1RXPOL_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P1RXPOL_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.EnableDitoConfig[1],
      prompt      = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG1_PROMPT),
      help        = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    grayoutif ideqval PCH_SETUP.EnableDitoConfig[1] == 0;
      numeric varid = PCH_SETUP.DitoVal[1],
        prompt      = STRING_TOKEN(STR_PCH_DITO_VAL1_PROMPT),
        help        = STRING_TOKEN(STR_PCH_DITO_VAL_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 1023,
        step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default     = 625,  // 625 by default
      endnumeric;

      numeric varid   = PCH_SETUP.DmVal[1],
        prompt      = STRING_TOKEN(STR_PCH_DM_VAL1_PROMPT),
        help        = STRING_TOKEN(STR_PCH_DM_VAL_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default     = 15,   // 15 by default
      endnumeric;
    endif;

    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_SATA2_STRING),
      text   = STRING_TOKEN(STR_SATA2_NAME),
      flags  = 0,
      key    = 0;

    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_SOFT_PRESERVE),
      text   = STRING_TOKEN(STR_SATA2_SOFT_PRESERVE_STATUS),
      flags  = 0,
      key    = 0;

    suppressif ideqvallist  PCH_SETUP.SataTestMode ==  SATA_TEST_MODE_ENABLE;
      oneof varid   = PCH_SETUP.SataPort[2],
        prompt      = STRING_TOKEN(STR_SATA_PORT_2),
        help        = STRING_TOKEN(STR_SATA_PORT_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval PCH_SETUP.SataExternal[2] == 1;
      oneof varid   = PCH_SETUP.SataHotPlug[2],
        prompt      = STRING_TOKEN(STR_SATA_HOTPLUG2),
        help        = STRING_TOKEN(STR_SATA_PORT_HOTPLUG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SATA_ESATA),
        text   = STRING_TOKEN(STR_SATA_HOTPLUG_SUPPORT),
        flags  = 0,
        key    = 0;
    endif;

    oneof varid   = PCH_SETUP.SataExternal[2],
      prompt      = STRING_TOKEN(STR_SATA_EXTERNAL),
      help        = STRING_TOKEN(STR_SATA_EXTERNAL_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.SataHotPlug[2] == 0
              OR ideqval SETUP_VOLATILE_DATA.SataMpsPresent[2] == 0;
      oneof varid   = PCH_SETUP.SataMechanicalSw[2],
        prompt      = STRING_TOKEN(STR_SATA_MECHANICAL_SW2),
        help        = STRING_TOKEN(STR_SATA_MECHANICAL_SW_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid   = PCH_SETUP.SataSpinUp[2],
      prompt      = STRING_TOKEN(STR_SATA_SPIN_UP2),
      help        = STRING_TOKEN(STR_SATA_SPIN_UP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SataType[2],
      prompt      = STRING_TOKEN(STR_SATA_TYPE2),
      help        = STRING_TOKEN(STR_SATA_TYPE_HELP),
      option text = STRING_TOKEN(STR_SATA_HDD_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_SATA_SSD_STRING), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.SataTopology[2],
       prompt = STRING_TOKEN(STR_SATA_TOPOLOGY2),
       help = STRING_TOKEN(STR_SATA_TOPOLOGY_HELP),
       default = 0, defaultstore = MyStandardDefault,
       option text = STRING_TOKEN(STR_SATA_UNKNOWN_TOPOLOGY_STRING), value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_ISATA_STRING), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_DIRECT_CONNECT_STRING), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_FLEX_STRING), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_M2_STRING), value = 4, flags = RESET_REQUIRED;
endoneof;

    oneof varid   = PCH_SETUP.PxDevSlp[2],
      prompt      = STRING_TOKEN(STR_PCH_P2DEVSLP_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P2DEVSLP_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SataRxPolarity[2],
      prompt      = STRING_TOKEN(STR_PCH_P2RXPOL_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P2RXPOL_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.EnableDitoConfig[2],
      prompt      = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG2_PROMPT),
      help        = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    grayoutif ideqval PCH_SETUP.EnableDitoConfig[2] == 0;
      numeric varid = PCH_SETUP.DitoVal[2],
        prompt      = STRING_TOKEN(STR_PCH_DITO_VAL2_PROMPT),
        help        = STRING_TOKEN(STR_PCH_DITO_VAL_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 1023,
        step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default value = 625,
      endnumeric;

      numeric varid   = PCH_SETUP.DmVal[2],
        prompt      = STRING_TOKEN(STR_PCH_DM_VAL2_PROMPT),
        help        = STRING_TOKEN(STR_PCH_DM_VAL_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default     = 15,   // 15 by default
      endnumeric;
    endif;

    //
    // Port 3 to 7 only in Traditional
    //
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == TypeTrad;
      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SATA3_STRING),
        text   = STRING_TOKEN(STR_SATA3_NAME),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SOFT_PRESERVE),
        text   = STRING_TOKEN(STR_SATA3_SOFT_PRESERVE_STATUS),
        flags  = 0,
        key    = 0;

      suppressif ideqvallist  PCH_SETUP.SataTestMode ==  SATA_TEST_MODE_ENABLE;
        oneof varid   = PCH_SETUP.SataPort[3],
          prompt      = STRING_TOKEN(STR_SATA_PORT_3),
          help        = STRING_TOKEN(STR_SATA_PORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.SataExternal[3] == 1;
        oneof varid   = PCH_SETUP.SataHotPlug[3],
          prompt      = STRING_TOKEN(STR_SATA_HOTPLUG3),
          help        = STRING_TOKEN(STR_SATA_PORT_HOTPLUG_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;

        text
          help   = STRING_TOKEN(STR_EMPTY_STRING),
          text   = STRING_TOKEN(STR_SATA_ESATA),
          text   = STRING_TOKEN(STR_SATA_HOTPLUG_SUPPORT),
          flags  = 0,
          key    = 0;
      endif;

      oneof varid   = PCH_SETUP.SataExternal[3],
        prompt      = STRING_TOKEN(STR_SATA_EXTERNAL),
        help        = STRING_TOKEN(STR_SATA_EXTERNAL_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.SataHotPlug[3] == 0
                OR ideqval SETUP_VOLATILE_DATA.SataMpsPresent[3] == 0;
        oneof varid   = PCH_SETUP.SataMechanicalSw[3],
          prompt      = STRING_TOKEN(STR_SATA_MECHANICAL_SW3),
          help        = STRING_TOKEN(STR_SATA_MECHANICAL_SW_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.SataSpinUp[3],
        prompt      = STRING_TOKEN(STR_SATA_SPIN_UP3),
        help        = STRING_TOKEN(STR_SATA_SPIN_UP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataType[3],
        prompt      = STRING_TOKEN(STR_SATA_TYPE3),
        help        = STRING_TOKEN(STR_SATA_TYPE_HELP),
        option text = STRING_TOKEN(STR_SATA_HDD_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SATA_SSD_STRING), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = PCH_SETUP.SataTopology[3],
       prompt = STRING_TOKEN(STR_SATA_TOPOLOGY3),
       help = STRING_TOKEN(STR_SATA_TOPOLOGY_HELP),
       default = 0, defaultstore = MyStandardDefault,
       option text = STRING_TOKEN(STR_SATA_UNKNOWN_TOPOLOGY_STRING), value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_ISATA_STRING), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_DIRECT_CONNECT_STRING), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_FLEX_STRING), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_M2_STRING), value = 4, flags = RESET_REQUIRED;
endoneof;

      oneof varid   = PCH_SETUP.PxDevSlp[3],
          prompt      = STRING_TOKEN(STR_PCH_P3DEVSLP_PROMPT),
          help        = STRING_TOKEN(STR_PCH_P3DEVSLP_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;

    oneof varid   = PCH_SETUP.SataRxPolarity[3],
      prompt      = STRING_TOKEN(STR_PCH_P3RXPOL_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P3RXPOL_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

      oneof varid   = PCH_SETUP.EnableDitoConfig[3],
        prompt      = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG3_PROMPT),
        help        = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.EnableDitoConfig[3] == 0;
        numeric varid = PCH_SETUP.DitoVal[3],
          prompt      = STRING_TOKEN(STR_PCH_DITO_VAL3_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DITO_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 625,  // 625 by default
        endnumeric;

        numeric varid   = PCH_SETUP.DmVal[3],
          prompt      = STRING_TOKEN(STR_PCH_DM_VAL3_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DM_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 15,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
         default     = 15,   // 15 by default
        endnumeric;
      endif;

      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SATA4_STRING),
        text   = STRING_TOKEN(STR_SATA4_NAME),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SOFT_PRESERVE),
        text   = STRING_TOKEN(STR_SATA4_SOFT_PRESERVE_STATUS),
        flags  = 0,
        key    = 0;

      suppressif ideqvallist  PCH_SETUP.SataTestMode ==  SATA_TEST_MODE_ENABLE;
        oneof varid   = PCH_SETUP.SataPort[4],
          prompt      = STRING_TOKEN(STR_SATA_PORT_4),
          help        = STRING_TOKEN(STR_SATA_PORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.SataExternal[4] == 1;
        oneof varid   = PCH_SETUP.SataHotPlug[4],
          prompt      = STRING_TOKEN(STR_SATA_HOTPLUG4),
          help        = STRING_TOKEN(STR_SATA_PORT_HOTPLUG_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;

        text
          help   = STRING_TOKEN(STR_EMPTY_STRING),
          text   = STRING_TOKEN(STR_SATA_ESATA),
          text   = STRING_TOKEN(STR_SATA_HOTPLUG_SUPPORT),
          flags  = 0,
          key    = 0;
      endif;

      oneof varid   = PCH_SETUP.SataExternal[4],
        prompt      = STRING_TOKEN(STR_SATA_EXTERNAL),
        help        = STRING_TOKEN(STR_SATA_EXTERNAL_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.SataHotPlug[4] == 0
                  OR ideqval SETUP_VOLATILE_DATA.SataMpsPresent[4] == 0;
        oneof varid   = PCH_SETUP.SataMechanicalSw[4],
          prompt      = STRING_TOKEN(STR_SATA_MECHANICAL_SW4),
          help        = STRING_TOKEN(STR_SATA_MECHANICAL_SW_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.SataSpinUp[4],
        prompt      = STRING_TOKEN(STR_SATA_SPIN_UP4),
        help        = STRING_TOKEN(STR_SATA_SPIN_UP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataType[4],
        prompt      = STRING_TOKEN(STR_SATA_TYPE4),
        help        = STRING_TOKEN(STR_SATA_TYPE_HELP),
        option text = STRING_TOKEN(STR_SATA_HDD_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SATA_SSD_STRING), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataTopology[4],
       prompt = STRING_TOKEN(STR_SATA_TOPOLOGY4),
       help = STRING_TOKEN(STR_SATA_TOPOLOGY_HELP),
       default = 0, defaultstore = MyStandardDefault,
       option text = STRING_TOKEN(STR_SATA_UNKNOWN_TOPOLOGY_STRING), value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_ISATA_STRING), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_DIRECT_CONNECT_STRING), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_FLEX_STRING), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_M2_STRING), value = 4, flags = RESET_REQUIRED;
      endoneof;

     oneof varid   = PCH_SETUP.PxDevSlp[4],
        prompt      = STRING_TOKEN(STR_PCH_P4DEVSLP_PROMPT),
        help        = STRING_TOKEN(STR_PCH_P4DEVSLP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

    oneof varid   = PCH_SETUP.SataRxPolarity[4],
      prompt      = STRING_TOKEN(STR_PCH_P4RXPOL_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P4RXPOL_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

      oneof varid   = PCH_SETUP.EnableDitoConfig[4],
        prompt      = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG4_PROMPT),
        help        = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.EnableDitoConfig[4] == 0;
        numeric varid = PCH_SETUP.DitoVal[4],
          prompt      = STRING_TOKEN(STR_PCH_DITO_VAL4_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DITO_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 625,  // 625 by default
        endnumeric;

        numeric varid   = PCH_SETUP.DmVal[4],
          prompt      = STRING_TOKEN(STR_PCH_DM_VAL4_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DM_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 15,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 15,   // 15 by default
        endnumeric;
      endif;

      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SATA5_STRING),
        text   = STRING_TOKEN(STR_SATA5_NAME),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SOFT_PRESERVE),
        text   = STRING_TOKEN(STR_SATA5_SOFT_PRESERVE_STATUS),
        flags  = 0,
        key    = 0;

      suppressif ideqvallist  PCH_SETUP.SataTestMode ==  SATA_TEST_MODE_ENABLE;
        oneof varid   = PCH_SETUP.SataPort[5],
          prompt      = STRING_TOKEN(STR_SATA_PORT_5),
          help        = STRING_TOKEN(STR_SATA_PORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.SataExternal[5] == 1;
        oneof varid   = PCH_SETUP.SataHotPlug[5],
          prompt      = STRING_TOKEN(STR_SATA_HOTPLUG5),
          help        = STRING_TOKEN(STR_SATA_PORT_HOTPLUG_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;

        text
          help   = STRING_TOKEN(STR_EMPTY_STRING),
          text   = STRING_TOKEN(STR_SATA_ESATA),
          text   = STRING_TOKEN(STR_SATA_HOTPLUG_SUPPORT),
          flags  = 0,
          key    = 0;
      endif;

      oneof varid   = PCH_SETUP.SataExternal[5],
        prompt      = STRING_TOKEN(STR_SATA_EXTERNAL),
        help        = STRING_TOKEN(STR_SATA_EXTERNAL_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.SataHotPlug[5] == 0
                OR ideqval SETUP_VOLATILE_DATA.SataMpsPresent[5] == 0;
        oneof varid   = PCH_SETUP.SataMechanicalSw[5],
          prompt      = STRING_TOKEN(STR_SATA_MECHANICAL_SW5),
          help        = STRING_TOKEN(STR_SATA_MECHANICAL_SW_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.SataSpinUp[5],
        prompt      = STRING_TOKEN(STR_SATA_SPIN_UP5),
        help        = STRING_TOKEN(STR_SATA_SPIN_UP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataType[5],
        prompt      = STRING_TOKEN(STR_SATA_TYPE5),
        help        = STRING_TOKEN(STR_SATA_TYPE_HELP),
        option text = STRING_TOKEN(STR_SATA_HDD_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SATA_SSD_STRING), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = PCH_SETUP.SataTopology[5],
       prompt = STRING_TOKEN(STR_SATA_TOPOLOGY5),
       help = STRING_TOKEN(STR_SATA_TOPOLOGY_HELP),
       option text = STRING_TOKEN(STR_SATA_UNKNOWN_TOPOLOGY_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_ISATA_STRING), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_DIRECT_CONNECT_STRING), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_FLEX_STRING), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_M2_STRING), value = 4, flags = RESET_REQUIRED;
endoneof;

     oneof varid    = PCH_SETUP.PxDevSlp[5],
        prompt      = STRING_TOKEN(STR_PCH_P5DEVSLP_PROMPT),
        help        = STRING_TOKEN(STR_PCH_P5DEVSLP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

    oneof varid   = PCH_SETUP.SataRxPolarity[5],
      prompt      = STRING_TOKEN(STR_PCH_P5RXPOL_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P5RXPOL_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

      oneof varid   = PCH_SETUP.EnableDitoConfig[5],
        prompt      = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG5_PROMPT),
        help        = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.EnableDitoConfig[5] == 0;
        numeric varid = PCH_SETUP.DitoVal[5],
          prompt      = STRING_TOKEN(STR_PCH_DITO_VAL5_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DITO_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 625,  // 625 by default
        endnumeric;

        numeric varid = PCH_SETUP.DmVal[5],
          prompt      = STRING_TOKEN(STR_PCH_DM_VAL5_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DM_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 15,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 15,   // 15 by default
        endnumeric;
      endif;

      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SATA6_STRING),
        text   = STRING_TOKEN(STR_SATA6_NAME),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SOFT_PRESERVE),
        text   = STRING_TOKEN(STR_SATA6_SOFT_PRESERVE_STATUS),
        flags  = 0,
        key    = 0;

      suppressif ideqvallist  PCH_SETUP.SataTestMode == SATA_TEST_MODE_ENABLE;
        oneof varid   = PCH_SETUP.SataPort[6],
          prompt      = STRING_TOKEN(STR_SATA_PORT_6),
          help        = STRING_TOKEN(STR_SATA_PORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.SataExternal[6] == 1;
        oneof varid   = PCH_SETUP.SataHotPlug[6],
          prompt      = STRING_TOKEN(STR_SATA_HOTPLUG6),
          help        = STRING_TOKEN(STR_SATA_PORT_HOTPLUG_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;

        text
          help   = STRING_TOKEN(STR_EMPTY_STRING),
          text   = STRING_TOKEN(STR_SATA_ESATA),
          text   = STRING_TOKEN(STR_SATA_HOTPLUG_SUPPORT),
          flags  = 0,
          key    = 0;
      endif;

      oneof varid   = PCH_SETUP.SataExternal[6],
        prompt      = STRING_TOKEN(STR_SATA_EXTERNAL),
        help        = STRING_TOKEN(STR_SATA_EXTERNAL_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.SataHotPlug[6] == 0
                OR ideqval SETUP_VOLATILE_DATA.SataMpsPresent[6] == 0;
        oneof varid   = PCH_SETUP.SataMechanicalSw[6],
          prompt      = STRING_TOKEN(STR_SATA_MECHANICAL_SW6),
          help        = STRING_TOKEN(STR_SATA_MECHANICAL_SW_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.SataSpinUp[6],
        prompt      = STRING_TOKEN(STR_SATA_SPIN_UP6),
        help        = STRING_TOKEN(STR_SATA_SPIN_UP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataType[6],
        prompt      = STRING_TOKEN(STR_SATA_TYPE6),
        help        = STRING_TOKEN(STR_SATA_TYPE_HELP),
        option text = STRING_TOKEN(STR_SATA_HDD_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SATA_SSD_STRING), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = PCH_SETUP.SataTopology[6],
       prompt = STRING_TOKEN(STR_SATA_TOPOLOGY6),
       help = STRING_TOKEN(STR_SATA_TOPOLOGY_HELP),
       option text = STRING_TOKEN(STR_SATA_UNKNOWN_TOPOLOGY_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_ISATA_STRING), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_DIRECT_CONNECT_STRING), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_FLEX_STRING), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_M2_STRING), value = 4, flags = RESET_REQUIRED;
endoneof;

     oneof varid   = PCH_SETUP.PxDevSlp[6],
        prompt      = STRING_TOKEN(STR_PCH_P6DEVSLP_PROMPT),
        help        = STRING_TOKEN(STR_PCH_P6DEVSLP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

    oneof varid   = PCH_SETUP.SataRxPolarity[6],
      prompt      = STRING_TOKEN(STR_PCH_P6RXPOL_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P6RXPOL_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

      oneof varid   = PCH_SETUP.EnableDitoConfig[6],
        prompt      = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG6_PROMPT),
        help        = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.EnableDitoConfig[6] == 0;
        numeric varid = PCH_SETUP.DitoVal[6],
          prompt      = STRING_TOKEN(STR_PCH_DITO_VAL6_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DITO_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 625,  // 625 by default
        endnumeric;

        numeric varid = PCH_SETUP.DmVal[6],
          prompt      = STRING_TOKEN(STR_PCH_DM_VAL6_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DM_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 15,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 15,   // 15 by default
        endnumeric;
      endif;

      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SATA7_STRING),
        text   = STRING_TOKEN(STR_SATA7_NAME),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SOFT_PRESERVE),
        text   = STRING_TOKEN(STR_SATA7_SOFT_PRESERVE_STATUS),
        flags  = 0,
        key    = 0;

      suppressif ideqvallist  PCH_SETUP.SataTestMode ==  SATA_TEST_MODE_ENABLE;
        oneof varid   = PCH_SETUP.SataPort[7],
          prompt      = STRING_TOKEN(STR_SATA_PORT_7),
          help        = STRING_TOKEN(STR_SATA_PORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.SataExternal[7] == 1;
        oneof varid   = PCH_SETUP.SataHotPlug[7],
          prompt      = STRING_TOKEN(STR_SATA_HOTPLUG7),
          help        = STRING_TOKEN(STR_SATA_PORT_HOTPLUG_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;

        text
          help   = STRING_TOKEN(STR_EMPTY_STRING),
          text   = STRING_TOKEN(STR_SATA_ESATA),
          text   = STRING_TOKEN(STR_SATA_HOTPLUG_SUPPORT),
          flags  = 0,
          key    = 0;
      endif;

      oneof varid   = PCH_SETUP.SataExternal[7],
        prompt      = STRING_TOKEN(STR_SATA_EXTERNAL),
        help        = STRING_TOKEN(STR_SATA_EXTERNAL_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.SataHotPlug[7] == 0
                OR ideqval SETUP_VOLATILE_DATA.SataMpsPresent[7] == 0;
        oneof varid   = PCH_SETUP.SataMechanicalSw[7],
          prompt      = STRING_TOKEN(STR_SATA_MECHANICAL_SW7),
          help        = STRING_TOKEN(STR_SATA_MECHANICAL_SW_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.SataSpinUp[7],
        prompt      = STRING_TOKEN(STR_SATA_SPIN_UP7),
        help        = STRING_TOKEN(STR_SATA_SPIN_UP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataType[7],
        prompt      = STRING_TOKEN(STR_SATA_TYPE7),
        help        = STRING_TOKEN(STR_SATA_TYPE_HELP),
        option text = STRING_TOKEN(STR_SATA_HDD_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SATA_SSD_STRING), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = PCH_SETUP.SataTopology[7],
       prompt = STRING_TOKEN(STR_SATA_TOPOLOGY7),
       help = STRING_TOKEN(STR_SATA_TOPOLOGY_HELP),
       option text = STRING_TOKEN(STR_SATA_UNKNOWN_TOPOLOGY_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_ISATA_STRING), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_DIRECT_CONNECT_STRING), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_FLEX_STRING), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_SATA_M2_STRING), value = 4, flags = RESET_REQUIRED;
endoneof;

     oneof varid   = PCH_SETUP.PxDevSlp[7],
        prompt      = STRING_TOKEN(STR_PCH_P7DEVSLP_PROMPT),
        help        = STRING_TOKEN(STR_PCH_P7DEVSLP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

    oneof varid   = PCH_SETUP.SataRxPolarity[7],
      prompt      = STRING_TOKEN(STR_PCH_P7RXPOL_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P7RXPOL_HELP),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

      oneof varid   = PCH_SETUP.EnableDitoConfig[7],
        prompt      = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG7_PROMPT),
        help        = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.EnableDitoConfig[7] == 0;
        numeric varid = PCH_SETUP.DitoVal[7],
          prompt      = STRING_TOKEN(STR_PCH_DITO_VAL7_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DITO_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 625,  // 625 by default
        endnumeric;

        numeric varid   = PCH_SETUP.DmVal[7],
          prompt      = STRING_TOKEN(STR_PCH_DM_VAL7_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DM_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 15,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 15,   // 15 by default
        endnumeric;
      endif;
    endif; //suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == TypeTrad;
    endif; //suppressif ideqval PCH_SETUP.PchSata == 0;
#if ACOUSTIC_MANAGEMENT_SUPPORT
    SEPARATOR

    oneof varid  = SETUP_DATA.HddAcousticPowerManagement,
      prompt   = STRING_TOKEN(STR_HDD_ACOUSTIC_PM_ENABLE),
      help     = STRING_TOKEN(STR_HDD_ACOUSTIC_PM_ENABLE_HELP),
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.HddAcousticPowerManagement == 0x0;
      oneof varid  = SETUP_DATA.HddAcousticMode,
        prompt   = STRING_TOKEN(STR_HDD_ACOUSTIC_ENABLE),
        help     = STRING_TOKEN(STR_HDD_ACOUSTIC_ENABLE_HELP),
        option text = STRING_TOKEN(STR_BYPASS_STRING), value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_QUIET_STRING), value = 0x80, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAXIMUM_PERFORMANCE_STRING), value = 0xFE, flags = RESET_REQUIRED;
      endoneof;
    endif;
#endif
  endform;//end of SATA_DEVICE_OPTIONS_FORM_ID

  form formid = AUTO_ID(PCH_SATA_SFMS_OPTIONS_FORM_ID),
    title     = STRING_TOKEN(STR_SATA_SFMS_OPTIONS_FORM_TITLE);

    SUBTITLE(STRING_TOKEN(STR_SATA_SFMS_OPTIONS_FORM_TITLE))
    SEPARATOR

    oneof varid   = PCH_SETUP.SataHddlk,
      prompt      = STRING_TOKEN(STR_PCH_HDDLK_PROMPT),
      help        = STRING_TOKEN(STR_PCH_HDDLK_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SataLedl,
      prompt      = STRING_TOKEN(STR_PCH_LEDL_PROMPT),
      help        = STRING_TOKEN(STR_PCH_LEDL_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval PCH_SETUP.SataInterfaceMode == SATA_MODE_RAID;
      oneof varid   = PCH_SETUP.SataLegacyOrom,
        prompt      = STRING_TOKEN(STR_PCH_RST_LEGACY_PROMPT),
        help        = STRING_TOKEN(STR_PCH_RST_LEGACY_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRaidR0,
        prompt      = STRING_TOKEN(STR_PCH_RAID0_PROMPT),
        help        = STRING_TOKEN(STR_PCH_RAID0_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRaidR1,
        prompt      = STRING_TOKEN(STR_PCH_RAID1_PROMPT),
        help        = STRING_TOKEN(STR_PCH_RAID1_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRaidR10,
        prompt      = STRING_TOKEN(STR_PCH_RAID10_PROMPT),
        help        = STRING_TOKEN(STR_PCH_RAID10_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRaidR5,
        prompt      = STRING_TOKEN(STR_PCH_RAID5_PROMPT),
        help        = STRING_TOKEN(STR_PCH_RAID5_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRaidIrrt,
        prompt      = STRING_TOKEN(STR_PCH_IRRT_PROMPT),
        help        = STRING_TOKEN(STR_PCH_IRRT_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRaidOub,
        prompt      = STRING_TOKEN(STR_PCH_OUB_PROMPT),
        help        = STRING_TOKEN(STR_PCH_OUB_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRaidIooe,
        prompt      = STRING_TOKEN(STR_PCH_IOOE_PROMPT),
        help        = STRING_TOKEN(STR_PCH_IOOE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRaidSrt,
        prompt      = STRING_TOKEN(STR_PCH_SRT_PROMPT),
        help        = STRING_TOKEN(STR_PCH_SRT_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRaidOromDelay,
        prompt      = STRING_TOKEN(STR_PCH_ODLY_PROMPT),
        help        = STRING_TOKEN(STR_PCH_ODLY_HELP),
        option text = STRING_TOKEN(STR_2S_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_4S_STRING), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_6S_STRING), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_8S_STRING), value = 3, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRstForceForm,
        prompt      = STRING_TOKEN(STR_PCH_RST_FORCE_FORM_PROMPT),
        help        = STRING_TOKEN(STR_PCH_RST_FORCE_FORM_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRstOptaneMemory,
        prompt      = STRING_TOKEN(STR_PCH_OPTANE_ACCEL_PROMPT),
        help        = STRING_TOKEN(STR_PCH_OPTANE_ACCEL_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataRstCpuAttachedStorage,
        prompt      = STRING_TOKEN(STR_PCH_CPU_ATTACHED_STORAGE_PROMPT),
        help        = STRING_TOKEN(STR_PCH_CPU_ATTACHED_STORAGE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

  endform; //End of PCH_SATA_SFMS_OPTIONS_FORM_ID

//
// Global PCIe EQ menu
//
#include "PcieEq.hfr"

//
// All strings used for PCIE are given as C preprocessor macros that concatenate string name and rootport number
// Tool that gathers string usage info from hfr files doesn't run preprocessor and can't find the new representation of strings
// To work around this problem, all such problematics strings are included in PchPcieStringPool file
//

#define PORT_INDEX 0
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 1
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 2
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 3
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 4
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 5
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 6
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 7
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 8
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 9
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 10
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 11
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 12
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 13
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 14
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 15
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 16
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 17
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 18
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 19
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 20
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 21
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 22
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

#define PORT_INDEX 23
#include "PchPcieSetupSinglePort.hfr"
#undef PORT_INDEX

  form formid = PCH_PCIE_CLOCK_FORM_ID,
    title     = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP);

    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK0_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ0_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK1_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ1_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK2_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ2_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK3_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ3_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK4_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ4_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK5_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ5_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    suppressif ideqval SETUP_VOLATILE_DATA.PlatformType == TypeUltUlx;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[6],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK6_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[6],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ6_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[7],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK7_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[7],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ7_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[8],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK8_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[8],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ8_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[9],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK9_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[9],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ9_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[10],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK10_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[10],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ10_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[11],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK11_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[11],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ11_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[12],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK12_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[12],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ12_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[13],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK13_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[13],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ13_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[14],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK14_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[14],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ14_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[15],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLOCK15_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLOCK_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[15],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CLKREQ15_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CLKREQ_HELP),
      option text = STRING_TOKEN(STR_PLATFORM_POR), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    endif;
  endform;

  form formid = AUTO_ID(THC_OPTIONS_FORM_ID),
    title     = STRING_TOKEN(STR_THC_OPTIONS_FORM_TITLE);

    suppressif ideqval SETUP_VOLATILE_DATA.ThcAvailable == 0;
      SUBTITLE(STRING_TOKEN(STR_THC_OPTIONS_FORM_HELP))
      SEPARATOR

      oneof varid  = PCH_SETUP.ThcPort0Assignment,
        prompt   = STRING_TOKEN(STR_THC_PORT_ASSIGNMENT_TITLE),
        help     = STRING_TOKEN(STR_THC_PORT_ASSIGNMENT_HELP),
        option text = STRING_TOKEN(STR_THC_PORT_ASSIGNMENT_NONE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_THC_PORT_ASSIGNMENT_THC0), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.ThcPort0Assignment == 0x0;
        oneof varid  = PCH_SETUP.ThcPort0Clock,
          prompt   = STRING_TOKEN(STR_THC_PORT_CLOCK_TITLE),
          help     = STRING_TOKEN(STR_THC_PORT_CLOCK_HELP),
          option text = STRING_TOKEN(STR_THC_PORT_CLOCK_FUNC_TITLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_THC_PORT_CLOCK_DFX_TITLE), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      //
      // If Port 0 is unassigned, disable Port 1 configuration
      //
      suppressif ideqval PCH_SETUP.ThcPort0Assignment == 0x0;
        oneof varid  = PCH_SETUP.ThcPort1Assignment,
          prompt   = STRING_TOKEN(STR_THC_PORT_ASSIGNMENT_TITLE),
          help     = STRING_TOKEN(STR_THC_PORT_ASSIGNMENT_HELP),
          option text = STRING_TOKEN(STR_THC_PORT_ASSIGNMENT_NONE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_THC_PORT_ASSIGNMENT_THC0), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_THC_PORT_ASSIGNMENT_THC1), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif ideqval PCH_SETUP.ThcPort1Assignment == 0x0;
          oneof varid  = PCH_SETUP.ThcPort1Clock,
            prompt   = STRING_TOKEN(STR_THC_PORT_CLOCK_TITLE),
            help     = STRING_TOKEN(STR_THC_PORT_CLOCK_HELP),
            option text = STRING_TOKEN(STR_THC_PORT_CLOCK_FUNC_TITLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_THC_PORT_CLOCK_DFX_TITLE), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif; //ThcPort1Assignment == 0x0
      endif; //ThcPort0Assignment == 0x0
    endif; //ThcAvailable == 0

    suppressif ideqval SETUP_VOLATILE_DATA.ThcAvailable == 1;
      SUBTITLE(STRING_TOKEN(STR_THC_NOT_AVAILABLE_HELP))
      SEPARATOR
    endif;

  endform; //End of THC_OPTIONS_FORM_ID

  form formid = AUTO_ID(PCH_HDAUDIO_OPTIONS_FORM_ID),
    title     = STRING_TOKEN(STR_HDAUDIO_OPTIONS_FORM_TITLE);

    SUBTITLE(STRING_TOKEN(STR_HDAUDIO_OPTIONS_FORM_HELP))
    SEPARATOR

    oneof varid  = PCH_SETUP.PchHdAudio,
      prompt   = STRING_TOKEN(STR_PCH_HDA_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PchHdAudio == 0x0;
      oneof varid  = PCH_SETUP.PchHdAudioDsp,
        prompt   = STRING_TOKEN(STR_PCH_HDA_ADSP_PROMPT),
        help     = STRING_TOKEN(STR_PCH_HDA_ADSP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchHdAudioDsp == 0x0;
        oneof varid  = PCH_SETUP.PchHdAudioDspUaaCompliance,
          prompt   = STRING_TOKEN(STR_PCH_HDA_ADSP_UAA_COMP_PROMPT),
          help     = STRING_TOKEN(STR_PCH_HDA_ADSP_UAA_COMP_HELP),
          option text = STRING_TOKEN(STR_PCH_HDA_NON_UAA), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_HDA_UAA), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif; // PCH_SETUP.PchHdAudioDsp == 0x0;

      oneof varid  = PCH_SETUP.PchHdAudioLinkMode,
        prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_PROMPT),
        help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_HELP),
        option text = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_HDALINK), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_I2S), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_SOUNDWIRE), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED), value = 3, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval PCH_SETUP.PchHdAudioLinkMode == HDAUDIO_LINK_MODE_ADVANCED;
        // Audio Link Mode Advanced Config
        text
           help   = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
           text   = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_TEXT),
           flags  = 0,
           key    = 0;

        // [0] HDA-Link
        grayoutif ideqval PCH_SETUP.PchHdAudioSspLinkEnable[0] == 1; // Muxed HDA/SSP0
          suppressif ideqval SETUP_VOLATILE_DATA.AudioHdaLinkSupported == 0;
            checkbox varid  = PCH_SETUP.PchHdAudioHdaLinkEnable,
              prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_HDA_PROMPT),
              help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
              // Flags behavior for checkbox is overloaded so that it equals
              // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
              flags    = RESET_REQUIRED,
              default  = TRUE, defaultstore = MyStandardDefault,
            endcheckbox;
          endif; // suppressif
        endif; // grayoutif

        checkbox varid  = PCH_SETUP.PchHdAudioHdaSdiEnable[0],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_HDA_SDI0_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = RESET_REQUIRED,
            default  = TRUE, defaultstore = MyStandardDefault,
          endcheckbox;

        checkbox varid  = PCH_SETUP.PchHdAudioHdaSdiEnable[1],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_HDA_SDI1_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = 0 | RESET_REQUIRED,
            key      = 0,
          endcheckbox;

        // [1] DMIC0
        grayoutif ideqval PCH_SETUP.PchHdAudioSndwLinkEnable[3] == 1; // Muxed DMIC0/SNDW4
        suppressif ideqval SETUP_VOLATILE_DATA.AudioDmicLinkSupported[0] == 0;
          checkbox varid  = PCH_SETUP.PchHdAudioDmicLinkEnable[0],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_DMIC0_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = RESET_REQUIRED,
            default  = TRUE, defaultstore = MyStandardDefault,
          endcheckbox;
        endif; // suppressif
        endif; // grayoutif

        // [2] DMIC1
        grayoutif ideqval PCH_SETUP.PchHdAudioSndwLinkEnable[2] == 1; // Muxed DMIC1/SNDW3
        suppressif ideqval SETUP_VOLATILE_DATA.AudioDmicLinkSupported[1] == 0;
          checkbox varid  = PCH_SETUP.PchHdAudioDmicLinkEnable[1],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_DMIC1_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = RESET_REQUIRED,
            default  = TRUE, defaultstore = MyStandardDefault,
          endcheckbox;
        endif; // suppressif
        endif; // grayoutif

        // [3] SSP0
        grayoutif ideqval PCH_SETUP.PchHdAudioHdaLinkEnable == 1; // Muxed HDA/SSP0
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[0] == 0;
          checkbox varid  = PCH_SETUP.PchHdAudioSspLinkEnable[0],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_SSP0_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = 0 | RESET_REQUIRED,
            key      = 0,
          endcheckbox;
        endif; // suppressif
        endif; // grayoutif

        // [4] I2S/SSP1
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[1] == 0;
          checkbox varid  = PCH_SETUP.PchHdAudioSspLinkEnable[1],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_SSP1_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = 0 | RESET_REQUIRED,
            key      = 0,
          endcheckbox;
        endif; // suppressif

        // [5] I2S/SSP2
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[2] == 0;
          grayoutif NOT match (stringref (STRING_TOKEN (STR_CNVI_IS_NOT_PRESENT_PATTERN)), stringref (STRING_TOKEN (STR_CNVI_CURRENT_STATE)));
            checkbox varid  = PCH_SETUP.PchHdAudioSspLinkEnable[2],
              prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_SSP2_PROMPT),
              help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
              flags    = 0 | RESET_REQUIRED,
              key      = 0,
            endcheckbox;
          endif;
        endif;

        // [6] SSP3
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[3] == 0;
          checkbox varid  = PCH_SETUP.PchHdAudioSspLinkEnable[3],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_SSP3_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = 0 | RESET_REQUIRED,
            key      = 0,
          endcheckbox;
        endif;

        // [7] I2S/SSP4
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[4] == 0;
          checkbox varid  = PCH_SETUP.PchHdAudioSspLinkEnable[4],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_SSP4_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = 0 | RESET_REQUIRED,
            key      = 0,
          endcheckbox;
        endif;

        // [8] I2S/SSP5
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[5] == 0;
          checkbox varid  = PCH_SETUP.PchHdAudioSspLinkEnable[5],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_SSP5_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = 0 | RESET_REQUIRED,
            key      = 0,
          endcheckbox;
        endif;

        // [9] SoundWire 1
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSndwLinkSupported[0] == 0;
          checkbox varid  = PCH_SETUP.PchHdAudioSndwLinkEnable[0],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_SNDW1_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
            key      = 0,
          endcheckbox;
        endif; // suppressif

        suppressif ideqval SETUP_VOLATILE_DATA.AudioSndwLinkSupported[1] == 0;
          checkbox varid  = PCH_SETUP.PchHdAudioSndwLinkEnable[1],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_SNDW2_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = 0 | RESET_REQUIRED,
            key      = 0,
          endcheckbox;
        endif; // suppressif

        // [11] SoundWire 3
        grayoutif ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[1] == 1; // Muxed DMIC1/SNDW3
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSndwLinkSupported[2] == 0;
          checkbox varid  = PCH_SETUP.PchHdAudioSndwLinkEnable[2],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_SNDW3_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = 0 | RESET_REQUIRED,
            key      = 0,
          endcheckbox;
        endif; // suppressif
        endif; // grayoutif

        // [12] SoundWire 4
        grayoutif ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[0] == 1; // Muxed DMIC0/SNDW4
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSndwLinkSupported[3] == 0;
          checkbox varid  = PCH_SETUP.PchHdAudioSndwLinkEnable[3],
            prompt   = STRING_TOKEN(STR_PCH_HDA_LINK_ADVANCED_SNDW4_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_LINK_MODE_ADVANCED_HELP),
            flags    = 0 | RESET_REQUIRED,
            key      = 0,
          endcheckbox;
        endif; // suppressif
        endif; // grayoutif
        SEPARATOR
      endif; //  PCH_SETUP.PchHdAudioLinkMode == HDAUDIO_LINK_MODE_ADVANCED;

      oneof varid  = PCH_SETUP.PchHdAudioCodecSelect,
        prompt   = STRING_TOKEN(STR_PCH_HDA_CODEC_SELECT_PROMPT),
        help     = STRING_TOKEN(STR_PCH_HDA_CODEC_SELECT_HELP),
        option text = STRING_TOKEN(STR_PCH_HDA_CODEC_PLATFORM_ONBOARD), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_HDA_CODEC_EXTERNAL_KIT), value = 1, flags = RESET_REQUIRED;
      endoneof;

      goto PCH_HDAUDIO_ADVANCED_OPTIONS_FORM_ID,
        prompt = STRING_TOKEN(STR_HDAUDIO_ADVANCED_OPTIONS_FORM_TITLE),
        help = STRING_TOKEN(STR_HDAUDIO_ADVANCED_OPTIONS_FORM_HELP);

      suppressif ideqval PCH_SETUP.PchHdAudioDsp == 0x0;
        goto PCH_HDAUDIO_FEATURES_FORM_ID,
          prompt = STRING_TOKEN(STR_HDAUDIO_FEATURES_FORM_TITLE),
          help = STRING_TOKEN(STR_HDAUDIO_FEATURES_FORM_HELP);
      endif; //  PCH_SETUP.PchHdAudioDsp == 0x0;
    endif; // PCH_SETUP.PchHdAudio == 0x0;
  endform; //End of PCH_HDAUDIO_OPTIONS_FORM_ID

  form formid = AUTO_ID(PCH_HDAUDIO_ADVANCED_OPTIONS_FORM_ID),
    title     = STRING_TOKEN(STR_HDAUDIO_ADVANCED_OPTIONS_FORM_TITLE);

    SUBTITLE(STRING_TOKEN(STR_HDAUDIO_ADVANCED_OPTIONS_FORM_HELP))
    SEPARATOR

    oneof varid  = PCH_SETUP.PchHdaIDisplayCodecDisconnect,
      prompt   = STRING_TOKEN(STR_PCH_HDA_IDISP_CODEC_DIS_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_IDISP_CODEC_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdAudioCodecSxWakeCapability,
      prompt   = STRING_TOKEN(STR_PCH_HDA_CODEC_SX_WAKE_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_CODEC_SX_WAKE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdAudioPme,
      prompt   = STRING_TOKEN(STR_PCH_HDA_PME_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PME_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    text
       help   = STRING_TOKEN(STR_PCH_HDA_LINK_CONTROL_TITLE),
       text   = STRING_TOKEN(STR_PCH_HDA_LINK_CONTROL_TITLE),
       flags  = 0,
       key    = 0;

    oneof varid        = PCH_SETUP.PchHdaHdAudioLinkFreq,
           prompt      = STRING_TOKEN(STR_PCH_HDA_HDAUDIO_LINK_FREQ),
           help        = STRING_TOKEN(STR_PCH_HDA_HDAUDIO_LINK_FREQ_HELP),
           option text = STRING_TOKEN(STR_6MHZ),  value = 0, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(STR_12MHZ), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(STR_24MHZ), value = 2, flags = DEFAULT | RESET_REQUIRED;
    endoneof;

    oneof varid        = PCH_SETUP.PchHdaIDisplayLinkFreq,
           prompt      = STRING_TOKEN(STR_PCH_HDA_IDISP_LINK_FREQ),
           help        = STRING_TOKEN(STR_PCH_HDA_IDISP_LINK_FREQ_HELP),
           option text = STRING_TOKEN(STR_48MHZ), value = 3, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(STR_96MHZ), value = 4, flags = DEFAULT | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaIDisplayLinkTmode,
      prompt   = STRING_TOKEN(STR_PCH_HDA_IDISP_LINK_TMODE),
      help     = STRING_TOKEN(STR_PCH_HDA_IDISP_LINK_TMODE_HELP),
      option text = STRING_TOKEN(STR_PCH_HDA_IDISP_2T_MODE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_IDISP_4T_MODE), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_IDISP_8T_MODE), value = 3, flags =  RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_IDISP_16T_MODE), value = 4, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PchSetup.PchHdaAutonomousClockStopSndw[0],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW1_AUTONOMOUS_CLOCK_STOP_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW1_AUTONOMOUS_CLOCK_STOP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PchSetup.PchHdaAutonomousClockStopSndw[1],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW2_AUTONOMOUS_CLOCK_STOP_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW2_AUTONOMOUS_CLOCK_STOP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PchSetup.PchHdaAutonomousClockStopSndw[2],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW3_AUTONOMOUS_CLOCK_STOP_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW3_AUTONOMOUS_CLOCK_STOP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PchSetup.PchHdaAutonomousClockStopSndw[3],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW4_AUTONOMOUS_CLOCK_STOP_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW4_AUTONOMOUS_CLOCK_STOP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaAutonomousClockStopSndw[0],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW1_DATA_ON_ACTIVE_INTERVAL_SELECT_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_HELP),
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_3CLOCK_PERIOD), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_4CLOCK_PERIOD), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_5CLOCK_PERIOD), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_6CLOCK_PERIOD), value = 3, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaAutonomousClockStopSndw[1],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW2_DATA_ON_ACTIVE_INTERVAL_SELECT_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_HELP),
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_3CLOCK_PERIOD), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_4CLOCK_PERIOD), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_5CLOCK_PERIOD), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_6CLOCK_PERIOD), value = 3, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaAutonomousClockStopSndw[2],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW3_DATA_ON_ACTIVE_INTERVAL_SELECT_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_HELP),
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_3CLOCK_PERIOD), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_4CLOCK_PERIOD), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_5CLOCK_PERIOD), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_6CLOCK_PERIOD), value = 3, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaAutonomousClockStopSndw[3],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW4_DATA_ON_ACTIVE_INTERVAL_SELECT_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_HELP),
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_3CLOCK_PERIOD), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_4CLOCK_PERIOD), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_5CLOCK_PERIOD), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_ACTIVE_INTERVAL_SELECT_6CLOCK_PERIOD), value = 3, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaDataOnDelaySelectSndw[0],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW1_DATA_ON_DELAY_SELECT_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_HELP),
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_2CLOCK_PERIOD), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_3CLOCK_PERIOD), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = PCH_SETUP.PchHdaDataOnDelaySelectSndw[1],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW2_DATA_ON_DELAY_SELECT_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_HELP),
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_2CLOCK_PERIOD), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_3CLOCK_PERIOD), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = PCH_SETUP.PchHdaDataOnDelaySelectSndw[2],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW3_DATA_ON_DELAY_SELECT_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_HELP),
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_2CLOCK_PERIOD), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_3CLOCK_PERIOD), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = PCH_SETUP.PchHdaDataOnDelaySelectSndw[3],
      prompt   = STRING_TOKEN(STR_PCH_HDA_SNDW4_DATA_ON_DELAY_SELECT_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_HELP),
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_2CLOCK_PERIOD), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_HDA_SNDW_DATA_ON_DELAY_SELECT_3CLOCK_PERIOD), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endform; //End of STR_HDAUDIO_ADVANCED_OPTIONS_FORM_ID

  form formid = AUTO_ID(PCH_HDAUDIO_FEATURES_FORM_ID),
    title     = STRING_TOKEN(STR_HDAUDIO_FEATURES_FORM_TITLE);

    SUBTITLE(STRING_TOKEN(STR_HDAUDIO_FEATURES_FORM_HELP))
    SEPARATOR

    grayoutif NOT ideqval PCH_SETUP.PchHdAudioDspUaaCompliance == 0x0;
      // NHLT Endpoints selection
      text
         help   = STRING_TOKEN(STR_PCH_HDA_NHLT_ENDPOINT_TITLE),
         text   = STRING_TOKEN(STR_PCH_HDA_NHLT_ENDPOINT_TITLE),
         flags  = 0,
         key    = 0;

      oneof varid   = PCH_SETUP.PchHdAudioNhltExternalTable,
        prompt      = STRING_TOKEN(STR_PCH_HDA_NHLT_EXTERNAL_TABLE),
        help        = STRING_TOKEN(STR_PCH_HDA_NHLT_EXTERNAL_TABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PchHdAudioNhltExternalTable == 1;
        grayoutif ideqval PCH_SETUP.PchHdAudioLinkMode == HDAUDIO_LINK_MODE_SNDW OR        // Audio Link Mode SoundWire (DMICs pins not enabled)
                  (ideqval PCH_SETUP.PchHdAudioLinkMode == HDAUDIO_LINK_MODE_ADVANCED AND  // Audio Link Mode Advanced and DMIC links not enabled
                   ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[0] == 0 AND
                   ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[1] == 0);
          oneof varid     = PCH_SETUP.PchHdAudioNhltEndpointDmic,
                 prompt      = STRING_TOKEN(STR_PCH_HDA_NHLT_ENDPOINT_DMIC),
                 help        = STRING_TOKEN(STR_PCH_HDA_NHLT_ENDPOINT_DMIC_HELP),
                 default     = 2, defaultstore = MyStandardDefault,
                 option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
                 option text = STRING_TOKEN(STR_PCH_HDA_DMIC_1CH), value = 3, flags = RESET_REQUIRED;
                 option text = STRING_TOKEN(STR_PCH_HDA_DMIC_2CH), value = 1, flags = RESET_REQUIRED;
                 option text = STRING_TOKEN(STR_PCH_HDA_DMIC_4CH), value = 2, flags = RESET_REQUIRED;
          endoneof;
        endif; //PCH_SETUP.PchHdAudioLinkMode = HDAUDIO_LINK_MODE_SNDW or HDAUDIO_LINK_MODE_ADVANCED PchHdAudioLinkConfig[1:2] == 0

        grayoutif (ideqval PCH_SETUP.PchHdAudioLinkMode == HDAUDIO_LINK_MODE_HDA OR        // Audio Link Mode not SSP
                  ideqval PCH_SETUP.PchHdAudioLinkMode == HDAUDIO_LINK_MODE_SNDW OR
                  (ideqval PCH_SETUP.PchHdAudioLinkMode == HDAUDIO_LINK_MODE_ADVANCED AND // Audio Link Mode Advanced and SSP links not enabled
                   ideqval PCH_SETUP.PchHdAudioSspLinkEnable[0] == 0 AND
                   ideqval PCH_SETUP.PchHdAudioSspLinkEnable[1] == 0 AND
                   ideqval PCH_SETUP.PchHdAudioSspLinkEnable[2] == 0)) AND
                  match (stringref (STRING_TOKEN (STR_CNVI_IS_NOT_PRESENT_PATTERN)), stringref (STRING_TOKEN (STR_CNVI_CURRENT_STATE)));
          oneof varid     = PCH_SETUP.PchHdAudioNhltEndpointBluetooth,
                 prompt      = STRING_TOKEN(STR_PCH_HDA_NHLT_ENDPOINT_BT),
                 help        = STRING_TOKEN(STR_PCH_HDA_NHLT_ENDPOINT_BT_HELP),
                 option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
                 option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | RESET_REQUIRED;
          endoneof;

          oneof varid     = PCH_SETUP.PchHdAudioNhltEndpointI2s,
                 prompt      = STRING_TOKEN(STR_PCH_HDA_NHLT_ENDPOINT_I2S),
                 help        = STRING_TOKEN(STR_PCH_HDA_NHLT_ENDPOINT_I2S_HELP),
                 option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
                 option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | RESET_REQUIRED;
          endoneof;
        endif; //PCH_SETUP.PchHdAudioLinkMode HDAUDIO_LINK_MODE_HDA or HDAUDIO_LINK_MODE_SNDW or HDAUDIO_LINK_MODE_ADVANCED PchHdAudioLinkConfig[3:5] == 0

        suppressif ideqval PCH_SETUP.PchHdAudioNhltEndpointI2s == 0;
          // CNL TODO: Review I2S codecs list
          oneof varid  = PCH_SETUP.PchHdAudioI2sCodecSelect,
            prompt   = STRING_TOKEN(STR_PCH_HDA_I2S_CODEC_SELECT_PROMPT),
            help     = STRING_TOKEN(STR_PCH_HDA_I2S_CODEC_SELECT_HELP),
            option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_PCH_HDA_I2S_CODEC_1), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_PCH_HDA_I2S_CODEC_ALC5660I), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
        endif; //  PCH_SETUP.PchHdAudioNhltEndpointI2s == 0
      endif; // UAA compliance check (PchHdAudioDspUaaCompliance)
    endif; //  PCH_SETUP.PchHdAudioEnableLoadExternalNhltTable == 1

    SEPARATOR
    // DSP Feature support selection
    text
       help   = STRING_TOKEN(STR_PCH_HDA_FEATURE_HELP),
       text   = STRING_TOKEN(STR_PCH_HDA_FEATURE_TITLE),
       flags  = 0,
       key    = 0;

    // Wake on Voice (WoV) support
    checkbox varid  = PCH_SETUP.PchHdAudioFeature[0],
      prompt   = STRING_TOKEN(STR_PCH_HDA_FEATURE_0_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_FEATURE_HELP),
      // Flags behavior for checkbox is overloaded so that it equals
      // a DEFAULT value.  CHECKBOX_DEFAULT = ON, 0 = off
      flags    = RESET_REQUIRED,
      default  = TRUE, defaultstore = MyStandardDefault,
    endcheckbox;

    // BT Sideband support
    checkbox varid  = PCH_SETUP.PchHdAudioFeature[1],
      prompt   = STRING_TOKEN(STR_PCH_HDA_FEATURE_1_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_FEATURE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    grayoutif ideqval PCH_SETUP.PchHdAudioFeature[1] == 0x0;
      // BT Intel HFP SCO
      checkbox varid  = PCH_SETUP.PchHdAudioFeature[5],
        prompt   = STRING_TOKEN(STR_PCH_HDA_FEATURE_5_PROMPT),
        help     = STRING_TOKEN(STR_PCH_HDA_FEATURE_HELP),
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      // BT Intel A2DP
      checkbox varid  = PCH_SETUP.PchHdAudioFeature[6],
        prompt   = STRING_TOKEN(STR_PCH_HDA_FEATURE_6_PROMPT),
        help     = STRING_TOKEN(STR_PCH_HDA_FEATURE_HELP),
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;
    endif; // BT Sideband Support

    // Codec based Voice Activity Detection (VAD) support
    checkbox varid  = PCH_SETUP.PchHdAudioFeature[2],
      prompt   = STRING_TOKEN(STR_PCH_HDA_FEATURE_2_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_FEATURE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    grayoutif ideqval PCH_SETUP.PchHdAudioFeature[8] == 0x1;
      // DSP-based speech pre-processing disabled
      // Cannot be disabled (set) if selected WoV mode is 'Windows 10 Hardware Voice Activation for Cortana' (HdAudioFeature[BIT8] = 1)
      checkbox varid  = PCH_SETUP.PchHdAudioFeature[7],
        prompt   = STRING_TOKEN(STR_PCH_HDA_FEATURE_7_PROMPT),
        help     = STRING_TOKEN(STR_PCH_HDA_FEATURE_HELP),
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
        default  = FALSE, defaultstore = MyStandardDefault,
      endcheckbox;
    endif; // WoV Mode check

    // WoV mode: support for Windows 10 Hardware Voice Activation for Cortana or Intel WoV
    oneof varid  = PCH_SETUP.PchHdAudioFeature[8],
      prompt      = STRING_TOKEN(STR_PCH_HDA_FEATURE_8_PROMPT),
      help        = STRING_TOKEN(STR_PCH_HDA_FEATURE_HELP),
      option text = STRING_TOKEN(STR_INTEL_WAKE_ON_VOICE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WIN_VOICE_ACTIVATION), value = 1, flags = DEFAULT | RESET_REQUIRED;
    endoneof;

    SEPARATOR
    // DSP Pre/Post Processing module support selection
    text
       help   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
       text   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_TITLE),
       flags  = 0,
       key    = 0;

    // Post Processing Module 0 - Waves Post-process
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[0],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_0_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 1 - DTS
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[1],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_1_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Pre Processing Module 2 - IntelSst Speech
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[2],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_2_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 3 - Dolby
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[3],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_3_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 4 - Waves Pre-process
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[4],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_4_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 5 - Audyssey
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[5],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_5_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 5 - Maxim Smart AMP
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[6],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_6_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 7 - ForteMedia SAMSoft
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[7],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_7_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 9 - Sound Research IP
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[9],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_9_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 10 - Conexant Pre-Process
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[10],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_10_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 11 - Conexant Smart Amp
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[11],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_11_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 12 - Realtek Post-Process
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[12],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_12_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 13 - Realtek Smart Amp
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[13],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_13_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 14 - Icepower IP MFX sub module
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[14],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_14_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 15 - Icepower IP EFX sub module
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[15],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_15_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 16 - Icepower IP SFX sub module
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[16],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_16_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Post Processing Module 17 - Voice Preprocessing
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[17],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_17_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    // Custom Pre/Post-Processing modules with GUID entered by user
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[29],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_29_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    suppressif ideqval PCH_SETUP.PchHdAudioPostProcessingMod[29] == 0x0;
      string  varid   = PCH_SETUP.PchHdAudioPostProcessingModCustomGuid1,
              prompt  = STRING_TOKEN(STR_PCH_HDA_PP_CUSTOM_GUID_29_PROMPT),
              help    = STRING_TOKEN(STR_PCH_HDA_PP_CUSTOM_GUID_HELP),
              flags   = 0 | RESET_REQUIRED, //INTERACTIVE,
              key     = 0,
              minsize = 36, // GUID characters number in format 11111111-2222-3333-4444-1234567890ab (without ending null)
              maxsize = 36,
      endstring;
    endif; // Custom module 29 disabled

    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[30],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_30_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    suppressif ideqval PCH_SETUP.PchHdAudioPostProcessingMod[30] == 0x0;
      string  varid   = PCH_SETUP.PchHdAudioPostProcessingModCustomGuid2,
              prompt  = STRING_TOKEN(STR_PCH_HDA_PP_CUSTOM_GUID_30_PROMPT),
              help    = STRING_TOKEN(STR_PCH_HDA_PP_CUSTOM_GUID_HELP),
              flags   = 0 | RESET_REQUIRED, //INTERACTIVE,
              key     = 0,
              minsize = 36, // GUID characters number in format 11111111-2222-3333-4444-1234567890ab (without ending null)
              maxsize = 36,
      endstring;
    endif; // Custom module 30 disabled

    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[31],
      prompt   = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_31_PROMPT),
      help     = STRING_TOKEN(STR_PCH_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    suppressif ideqval PCH_SETUP.PchHdAudioPostProcessingMod[31] == 0x0;
      string  varid   = PCH_SETUP.PchHdAudioPostProcessingModCustomGuid3,
              prompt  = STRING_TOKEN(STR_PCH_HDA_PP_CUSTOM_GUID_31_PROMPT),
              help    = STRING_TOKEN(STR_PCH_HDA_PP_CUSTOM_GUID_HELP),
              flags   = 0 | RESET_REQUIRED, //INTERACTIVE,
              key     = 0,
              minsize = 36, // GUID characters number in format 11111111-2222-3333-4444-1234567890ab (without ending null)
              maxsize = 36,
      endstring;
    endif; // Custom module 31 disabled
  endform; //End of PCH_HDAUDIO_FEATURES_FORM_ID

  form formid = AUTO_ID(SECURITY_OPTIONS_FORM_ID),
    title     = STRING_TOKEN(STR_SECURITY_OPTIONS_FORM_TITLE);

    SUBTITLE(STRING_TOKEN(STR_SECURITY_OPTIONS_FORM_TITLE))
    SEPARATOR

    oneof varid  = PCH_SETUP.PchRtcMemoryLock,
      prompt   = STRING_TOKEN(STR_PCH_RTC_MEMORY_LOCK_PROMPT),
      help     = STRING_TOKEN(STR_PCH_RTC_MEMORY_LOCK_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqvallist CPU_SETUP.BiosGuard == 1;
      oneof varid  = PCH_SETUP.PchBiosLock,
        prompt   = STRING_TOKEN(STR_PCH_BLE_PROMPT),
        help     = STRING_TOKEN(STR_PCH_BLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid  = PCH_SETUP.UnlockGpioPads,
      prompt   = STRING_TOKEN(STR_PCH_UNLOCK_GPIO_PROMPT),
      help     = STRING_TOKEN(STR_PCH_UNLOCK_GPIO_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endform; //End of SECURITY_OPTIONS_FORM_ID

//
// Serial Io
//
form formid = 122,
    title     = STRING_TOKEN(STR_SERIAL_IO_OPTIONS_FORM_TITLE);

    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_OPTIONS_FORM_TITLE))

    //
    // I2C1-3 would be undetectable by OS if I2C0 is disabled, because it's Function0 of their PCIE device
    //
    grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C1] == 1 OR
              ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C2] == 1 OR
              ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C3] == 1;
      oneof varid  = PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C0],
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_I2C0),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_DEVICE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C0] == 0;
      oneof varid  = PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C1],
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_I2C1),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_DEVICE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C0] == 0;
      oneof varid  = PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C2],
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_I2C2),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_DEVICE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C0] == 0;
      oneof varid  = PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C3],
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_I2C3),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_DEVICE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid  = PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C4],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_I2C4),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_I2C4_DEVICE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C4] == 0;
      oneof varid  = PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C5],
          prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_I2C5),
          help     = STRING_TOKEN(STR_PCH_SERIAL_IO_I2C5_DEVICE_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;
    oneof varid  = PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C6],
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_I2C6),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_DEVICE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    grayoutif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C6] == 0;
      oneof varid  = PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C7],
          prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_I2C7),
          help     = STRING_TOKEN(STR_PCH_SERIAL_IO_DEVICE_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;
  grayoutif ideqval PCH_SETUP.PchPseSpiEnable[2] == 1;
    oneof varid  = PCH_SETUP.PchSerialIoSpi[SERIAL_IO_SPI0],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI0),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_DEVICE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;

  grayoutif ideqval PCH_SETUP.PchPseSpiEnable[3] == 1;
    oneof varid  = PCH_SETUP.PchSerialIoSpi[SERIAL_IO_SPI1],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI1),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_DEVICE_HELP),
      default  = 2, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_POSTCODE_ONLY), value = 2, flags = RESET_REQUIRED;
    endoneof;
  endif;

  grayoutif ideqval PCH_SETUP.PchPsePwmPinEnable[3] == 1 OR
            ideqval PCH_SETUP.PchPseTgpioPinEnable[10] == 1 OR
            ideqval PCH_SETUP.PchPseTgpioPinEnable[11] == 1 OR
            ideqval PCH_SETUP.PchPseTgpioPinEnable[12] == 1 OR
            ideqval PCH_SETUP.PchPseTgpioPinEnable[13] == 1 OR
            ideqval PCH_SETUP.PchPseTgpioPinEnable[39] == 1 OR
            ideqval PCH_SETUP.PchPseSpiEnable[0] == 1;
    oneof varid  = PCH_SETUP.PchSerialIoSpi[SERIAL_IO_SPI2],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI2),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI2_DEVICE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;
    //
    // UART 0 (00:30:00) cannot be enabled when:
    //   1. I2S Audio codec is enabled (\_SB.PC00.I2C0.HDAC) due to GPIO GPP_C8 muxing
    // Note: Child BDF devices like: UART1 (00:30:01), SPI0 (00:30:02), SPI1 (00:30:03) can be enabled even
    //       if UART0 (00:30:00) is disabled (UART0 will be enumerated, but not initialized)
    //
    grayoutif (ideqvallist PCH_SETUP.PchHdAudioI2sCodecSelect == 1 2 3)
      ;
      oneof varid  = PCH_SETUP.PchSerialIoUart[SERIAL_IO_UART0],
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART0),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_DEVICE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_COM), value = 3, flags = RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid  = PCH_SETUP.PchSerialIoUart[SERIAL_IO_UART1],
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART1),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_DEVICE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_COM), value = 3, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.OsDebugPort == 3;
    oneof varid  = PCH_SETUP.PchSerialIoUart[SERIAL_IO_UART2],
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART2),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_UART2_DEVICE_HELP),
#ifdef MDEPKG_NDEBUG
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#else
        option text = STRING_TOKEN(STR_DBG_ONLY), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#endif
        option text = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_COM), value = 3, flags = RESET_REQUIRED;
        suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == TypeUltUlx;
            option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endif
    endoneof;
    endif;
    suppressif NOT ideqval PCH_SETUP.OsDebugPort == 3;
      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART2),
        text   = STRING_TOKEN(STR_PCH_RESERVED_FOR_DBG),
        flags = 0, key = 0;
    endif;

    //
    // GPIO
    //
    oneof varid  = PCH_SETUP.PchGpioIrqRoute,
      prompt   = STRING_TOKEN(STR_PCH_GPIO_IRQ_ROUTE),
      help     = STRING_TOKEN(STR_PCH_GPIO_IRQ_ROUTE_HELP),
      option text = STRING_TOKEN(STR_PCH_GPIO_ROUTE_IRQ14), value = 14, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_GPIO_ROUTE_IRQ15), value = 15, flags = RESET_REQUIRED;
    endoneof;


    SEPARATOR

    suppressif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C0] == 0;
        goto 128,
          prompt = STRING_TOKEN(STR_SERIAL_IO_I2C0_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C1] == 0;
        goto 129,
          prompt = STRING_TOKEN(STR_SERIAL_IO_I2C1_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;

    suppressif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C2] == 0;
        goto 135,
          prompt = STRING_TOKEN(STR_SERIAL_IO_I2C2_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C3] == 0;
        goto 136,
          prompt = STRING_TOKEN(STR_SERIAL_IO_I2C3_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;

    suppressif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C4] == 0 OR
               ideqval PCH_SETUP.PchSerialIoDeviceI2C4Support == 1;
        goto 137,
          prompt = STRING_TOKEN(STR_SERIAL_IO_I2C4_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoI2c[SERIAL_IO_I2C5] == 0;
        goto 138,
          prompt = STRING_TOKEN(STR_SERIAL_IO_I2C5_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;

    suppressif ideqval PCH_SETUP.PchSerialIoSpi[SERIAL_IO_SPI0] == 0;
        goto 130,
          prompt = STRING_TOKEN(STR_SERIAL_IO_SPI0_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoSpi[SERIAL_IO_SPI1] == 0;
        goto 131,
          prompt = STRING_TOKEN(STR_SERIAL_IO_SPI1_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoSpi[SERIAL_IO_SPI2] == 0;
        goto 140,
          prompt = STRING_TOKEN(STR_SERIAL_IO_SPI2_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoUart[SERIAL_IO_UART0] == 0 OR
               ideqval PCH_SETUP.OsDebugPort == 1;
        goto 132,
          prompt = STRING_TOKEN(STR_SERIAL_IO_UART0_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoUart[SERIAL_IO_UART1] == 0 OR
               ideqval PCH_SETUP.OsDebugPort == 2;
        goto 133,
          prompt = STRING_TOKEN(STR_SERIAL_IO_UART1_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoUart[SERIAL_IO_UART2] == 0;
        goto 139,
          prompt = STRING_TOKEN(STR_SERIAL_IO_UART2_FORM_TITLE),
          help = STRING_TOKEN(STR_SERIAL_IO_CTRL_FORM_HELP);
    endif;

    SEPARATOR

    oneof varid  = SETUP_DATA.PchI2cWittDevice,
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_WITT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_WITT_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WITT_ENABLED_I2C0), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WITT_ENABLED_I2C1), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WITT_ENABLED_I2C2), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WITT_ENABLED_I2C3), value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WITT_ENABLED_I2C4), value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WITT_ENABLED_I2C5), value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WITT_ENABLED_I2C6), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WITT_ENABLED_I2C7), value = 8, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WITT_ENABLED_SPI0), value = 9, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WITT_ENABLED_SPI1), value = 10, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_WITT_ENABLED_SPI2), value = 11, flags = RESET_REQUIRED;

    endoneof;

    suppressif ideqval SETUP_DATA.PchI2cWittDevice == 0;
      oneof varid  = SETUP_DATA.PchI2cWittVersion,
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_WITT_VER),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_WITT_VER_HELP),
        option text = STRING_TOKEN(STR_WITT), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MITT), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;
    oneof varid  = SETUP_DATA.PchUartUtkDevice,
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_UTK),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_UTK_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED_UART0), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED_UART1), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED_UART2), value = 3, flags = RESET_REQUIRED;
    endoneof;
    checkbox varid  = PCH_SETUP.PchAdditionalSerialIoDevices,
      prompt      = STRING_TOKEN(STR_SERIAL_IO_TEST_DEVICES),
      help        = STRING_TOKEN(STR_SERIAL_IO_TEST_DEVICES_HELP),
      flags   = RESET_REQUIRED, key = 0,
    endcheckbox;

    checkbox varid  = SETUP_DATA.PchSerialIoUseTimingParameters,
      prompt        = STRING_TOKEN(STR_SERIAL_IO_TIMING),
      help          = STRING_TOKEN(STR_SERIAL_IO_TIMING_HELP),
      flags         = CHECKBOX_DEFAULT | RESET_REQUIRED, key = 0,
    endcheckbox;

endform; //End of SerialIo Options Form ID

  form formid = 128,
    title     = STRING_TOKEN(STR_SERIAL_IO_I2C0_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_I2C0_FORM_TITLE))

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C0],
        prompt      = STRING_TOKEN(STR_PCH_I2C_SENSOR_DEVICE),
        help        = STRING_TOKEN(STR_PCH_SENSOR_DEVICE_HELP),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    SEPARATOR

    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C0] == 1 3 5 7; //Please refer "8 Bits Map of I2C Devices" in SetupVariable.h
        goto TOUCH_PAD_FORM_ID,
          prompt = STRING_TOKEN(STR_TOUCH_PAD_FORM_TITLE),
          help = STRING_TOKEN(STR_TOUCH_PAD_HELP);
    endif;
    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C0] == 2 3 6 7; //Please refer "8 Bits Map of I2C Devices" in SetupVariable.h
        goto TOUCH_PANEL_FORM_ID,
          prompt = STRING_TOKEN(STR_TOUCH_PANEL_FORM_TITLE),
          help = STRING_TOKEN(STR_TOUCH_PANEL_HELP);
    endif;

    SEPARATOR

    oneof varid  = SETUP_DATA.PchI2cSpeed[SERIAL_IO_I2C0],
      prompt   = STRING_TOKEN(STR_PCH_SIO_I2C0_SPEED),
      help     = STRING_TOKEN(STR_PCH_SIO_I2C0_SPEED_HELP),
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH0,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 429,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL0,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 495,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD0,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH0,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 81,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML0,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW_HELP), minimum = 0, maximum = 65535, default = 153,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD0,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH0,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 9,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL0,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD0,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH0,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL0,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD0,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C0,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C0,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_HELP), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;

 endform;


  form formid = 129,
    title     = STRING_TOKEN(STR_SERIAL_IO_I2C1_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_I2C1_FORM_TITLE))

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C1],
        prompt      = STRING_TOKEN(STR_PCH_I2C_SENSOR_DEVICE),
        help        = STRING_TOKEN(STR_PCH_SENSOR_DEVICE_HELP),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    SEPARATOR

    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C1] == 1 3 5 7;
        goto TOUCH_PAD_FORM_ID,
          prompt = STRING_TOKEN(STR_TOUCH_PAD_FORM_TITLE),
          help = STRING_TOKEN(STR_TOUCH_PAD_HELP);
    endif;

    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C1] == 2 3 6 7;
        goto TOUCH_PANEL_FORM_ID,
          prompt = STRING_TOKEN(STR_TOUCH_PANEL_FORM_TITLE),
          help = STRING_TOKEN(STR_TOUCH_PANEL_HELP);
    endif;

    SEPARATOR

    oneof varid  = SETUP_DATA.PchI2cSpeed[SERIAL_IO_I2C1],
      prompt   = STRING_TOKEN(STR_PCH_SIO_I2C1_SPEED),
      help     = STRING_TOKEN(STR_PCH_SIO_I2C1_SPEED_HELP),
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH1,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 429,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL1,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 495,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD1,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH1,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 81,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML1,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW_HELP), minimum = 0, maximum = 65535, default = 153,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD1,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH1,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 9,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL1,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD1,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH1,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL1,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD1,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C1,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C1,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_HELP), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;

 endform;


  form formid = 135,
    title     = STRING_TOKEN(STR_SERIAL_IO_I2C2_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_I2C2_FORM_TITLE))

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C2],
        prompt      = STRING_TOKEN(STR_PCH_I2C_SENSOR_DEVICE),
        help        = STRING_TOKEN(STR_PCH_SENSOR_DEVICE_HELP),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    SEPARATOR

    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C2] == 1 3 5 7;
        goto TOUCH_PAD_FORM_ID,
          prompt = STRING_TOKEN(STR_TOUCH_PAD_FORM_TITLE),
          help = STRING_TOKEN(STR_TOUCH_PAD_HELP);
    endif;
    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C2] == 2 3 6 7;
        goto TOUCH_PANEL_FORM_ID,
          prompt = STRING_TOKEN(STR_TOUCH_PANEL_FORM_TITLE),
          help = STRING_TOKEN(STR_TOUCH_PANEL_HELP);
    endif;

    SEPARATOR

    oneof varid  = SETUP_DATA.PchI2cSpeed[SERIAL_IO_I2C2],
      prompt   = STRING_TOKEN(STR_PCH_SIO_I2C2_SPEED),
      help     = STRING_TOKEN(STR_PCH_SIO_I2C2_SPEED_HELP),
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH2,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 429,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL2,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 495,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD2,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH2,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 81,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML2,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW_HELP), minimum = 0, maximum = 65535, default = 153,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD2,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH2,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 9,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL2,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD2,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH2,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL2,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD2,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C2,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C2,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_HELP), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;

endform;


  form formid = 136,
    title     = STRING_TOKEN(STR_SERIAL_IO_I2C3_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_I2C3_FORM_TITLE))

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C3],
        prompt      = STRING_TOKEN(STR_PCH_I2C_SENSOR_DEVICE),
        help        = STRING_TOKEN(STR_PCH_SENSOR_DEVICE_HELP),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    SEPARATOR

    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C3] == 1 3 5 7;
        goto TOUCH_PAD_FORM_ID,
          prompt = STRING_TOKEN(STR_TOUCH_PAD_FORM_TITLE),
          help = STRING_TOKEN(STR_TOUCH_PAD_HELP);
    endif;
    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C3] == 2 3 6 7;
        goto TOUCH_PANEL_FORM_ID,
          prompt = STRING_TOKEN(STR_TOUCH_PANEL_FORM_TITLE),
          help = STRING_TOKEN(STR_TOUCH_PANEL_HELP);
    endif;

    SEPARATOR

    oneof varid  = SETUP_DATA.PchI2cSpeed[SERIAL_IO_I2C3],
      prompt   = STRING_TOKEN(STR_PCH_SIO_I2C3_SPEED),
      help     = STRING_TOKEN(STR_PCH_SIO_I2C3_SPEED_HELP),
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH3,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 429,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL3,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 495,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD3,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH3,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 81,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML3,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW_HELP), minimum = 0, maximum = 65535, default = 153,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD3,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH3,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 9,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL3,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD3,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH3,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL3,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD3,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C3,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C3,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_HELP), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;

 endform;


  form formid = 137,
    title     = STRING_TOKEN(STR_SERIAL_IO_I2C4_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_I2C4_FORM_TITLE))

    oneof varid  = SETUP_DATA.PchI2cSpeed[SERIAL_IO_I2C4],
      prompt   = STRING_TOKEN(STR_PCH_SIO_I2C4_SPEED),
      help     = STRING_TOKEN(STR_PCH_SIO_I2C4_SPEED_HELP),
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH4,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 429,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL4,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 495,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD4,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH4,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 81,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML4,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW_HELP), minimum = 0, maximum = 65535, default = 153,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD4,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH4,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 9,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL4,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD4,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH4,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL4,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD4,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C4,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C4,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_HELP), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;

 endform;


  form formid = 138,
    title     = STRING_TOKEN(STR_SERIAL_IO_I2C5_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_I2C5_FORM_TITLE))

    oneof varid  = SETUP_DATA.PchI2cSpeed[SERIAL_IO_I2C5],
      prompt   = STRING_TOKEN(STR_PCH_SIO_I2C5_SPEED),
      help     = STRING_TOKEN(STR_PCH_SIO_I2C5_SPEED_HELP),
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH5,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 429,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL5,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 495,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD5,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH5,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 81,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML5,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW_HELP), minimum = 0, maximum = 65535, default = 153,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD5,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH5,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 9,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL5,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD5,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH5,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL5,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD5,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C5,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C5,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_HELP), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;

 endform;

 form formid = 160,
    title     = STRING_TOKEN(STR_SERIAL_IO_I2C6_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_I2C6_FORM_TITLE))

    oneof varid  = SETUP_DATA.PchI2cSpeed[SERIAL_IO_I2C6],
      prompt   = STRING_TOKEN(STR_PCH_SIO_I2C6_SPEED),
      help     = STRING_TOKEN(STR_PCH_SIO_I2C6_SPEED_HELP),
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH6,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 429,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL6,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 495,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD6,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH6,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 81,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML6,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW_HELP), minimum = 0, maximum = 65535, default = 153,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD6,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH6,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 9,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL6,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD6,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH6,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL6,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD6,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0CC,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1CC,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_HELP), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;

 endform;

 form formid = 161,
    title     = STRING_TOKEN(STR_SERIAL_IO_I2C7_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_I2C7_FORM_TITLE))

    oneof varid  = SETUP_DATA.PchI2cSpeed[SERIAL_IO_I2C7],
      prompt   = STRING_TOKEN(STR_PCH_SIO_I2C7_SPEED),
      help     = STRING_TOKEN(STR_PCH_SIO_I2C7_SPEED_HELP),
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SIO_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH7,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 429,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL7,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_SSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 495,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD7,
        prompt = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_SSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH7,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 81,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML7,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FMCN_LOW_HELP), minimum = 0, maximum = 65535, default = 153,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD7,
        prompt = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FMCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH7,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 9,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL7,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_FPCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD7,
        prompt = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_FPCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH7,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HIGH_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL7,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW), help = STRING_TOKEN (STR_PCH_SIO_HSCN_LOW_HELP), minimum = 0, maximum = 65535, default = 16,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD7,
        prompt = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD), help = STRING_TOKEN (STR_PCH_SIO_HSCN_HOLD_HELP), minimum = 0, maximum = 65535, default = 8,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0CD,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1CD,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_HELP), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;

 endform;

  form formid = 130,
    title     = STRING_TOKEN(STR_SERIAL_IO_SPI0_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_SPI0_FORM_TITLE))

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[0],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS0_POLARITY_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_POLARITY_HELP),
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_LOW), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[1],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS1_POLARITY_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_POLARITY_HELP),
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_LOW), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    grayoutif ideqval SETUP_DATA.PchI2cWittDevice == 9;
      oneof varid  = SETUP_DATA.SerialIoSpiCsDeviceEnable[0],
        prompt     = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_DEVICE_PROMPT),
        help       = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_DEVICE_HELP),
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    SEPARATOR

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C6,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C6,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_HELP), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;

 endform;


  form formid = 131,
    title     = STRING_TOKEN(STR_SERIAL_IO_SPI1_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_SPI1_FORM_TITLE))

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[2],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS0_POLARITY_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_POLARITY_HELP),
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_LOW), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[3],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS1_POLARITY_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_POLARITY_HELP),
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_LOW), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    grayoutif ideqval SETUP_DATA.PchI2cWittDevice == 10;
      oneof varid   = SETUP_DATA.SerialIoSpiCsDeviceEnable[1],
        prompt      = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_DEVICE_PROMPT),
        help        = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_DEVICE_HELP),
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchSpiSensorDevicePort[SERIAL_IO_SPI1],
        prompt      = STRING_TOKEN(STR_PCH_SPI_SENSOR_DEVICE),
        help        = STRING_TOKEN(STR_PCH_SENSOR_DEVICE_HELP),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    SEPARATOR

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C7,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C7,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_HELP), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;

    suppressif NOT ideqvallist SETUP_DATA.PchSpiSensorDevicePort[SERIAL_IO_SPI1] == SERIAL_IO_SPI_FINGERPRINT;
        goto FINGER_PRINT_FORM_ID,
          prompt = STRING_TOKEN(STR_FINGER_PRINT_FORM_TITLE),
          help = STRING_TOKEN(STR_FINGER_PRINT_HELP);
    endif;

  endform;


  form formid = 140,
    title     = STRING_TOKEN(STR_SERIAL_IO_SPI2_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_SPI2_FORM_TITLE))

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[4],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS0_POLARITY_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_POLARITY_HELP),
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_LOW), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[5],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS1_POLARITY_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_POLARITY_HELP),
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_LOW), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCH_SERIAL_SPI_CS_ACTIVE_HIGH), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    grayoutif ideqval SETUP_DATA.PchI2cWittDevice == 11;
      oneof varid   = SETUP_DATA.SerialIoSpiCsDeviceEnable[2],
        prompt      = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_DEVICE_PROMPT),
        help        = STRING_TOKEN(STR_PCH_SERIAL_IO_SPI_CS_DEVICE_HELP),
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchSpiSensorDevicePort[SERIAL_IO_SPI2],
        prompt      = STRING_TOKEN(STR_PCH_SPI_SENSOR_DEVICE),
        help        = STRING_TOKEN(STR_PCH_SENSOR_DEVICE_HELP),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    SEPARATOR

    suppressif NOT ideqvallist SETUP_DATA.PchSpiSensorDevicePort[SERIAL_IO_SPI2] == SERIAL_IO_SPI_FINGERPRINT;
        goto FINGER_PRINT_FORM_ID,
          prompt = STRING_TOKEN(STR_FINGER_PRINT_FORM_TITLE),
          help = STRING_TOKEN(STR_FINGER_PRINT_HELP);
    endif;

  endform;


  form formid = 132,
    title     = STRING_TOKEN(STR_SERIAL_IO_UART0_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_UART0_FORM_TITLE))

    oneof varid  = PCH_SETUP.PchUartHwFlowCtrl[0],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_HW_FLOW_CTRL_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_HW_FLOW_CTRL_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchUartDmaEnable[0],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_DMA_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_DMA_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval PCH_SETUP.PchSerialIoUart[0] == 3;
      oneof varid  = PCH_SETUP.PchUartPowerGating[0],
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_PG_PROMPT),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_PG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    SEPARATOR

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C9,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C9,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_UART_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;
 endform;




  form formid = 133,
    title     = STRING_TOKEN(STR_SERIAL_IO_UART1_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_UART1_FORM_TITLE))

    oneof varid  = PCH_SETUP.PchUartHwFlowCtrl[1],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_HW_FLOW_CTRL_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_HW_FLOW_CTRL_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchUartDmaEnable[1],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_DMA_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_DMA_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval PCH_SETUP.PchSerialIoUart[1] == 3;
      oneof varid  = PCH_SETUP.PchUartPowerGating[1],
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_PG_PROMPT),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_PG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    SEPARATOR

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingM0CA,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1CA,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_UART_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;

   endform;




  form formid = 139,
    title     = STRING_TOKEN(STR_SERIAL_IO_UART2_FORM_TITLE);
    SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_UART2_FORM_TITLE))

    oneof varid  = PCH_SETUP.PchUartHwFlowCtrl[2],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_HW_FLOW_CTRL_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_HW_FLOW_CTRL_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;


    oneof varid  = PCH_SETUP.PchUartDmaEnable[2],
      prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_DMA_PROMPT),
      help     = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_DMA_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval PCH_SETUP.PchSerialIoUart[2] == 3;
      oneof varid  = PCH_SETUP.PchUartPowerGating[2],
        prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_PG_PROMPT),
        help     = STRING_TOKEN(STR_PCH_SERIAL_IO_UART_PG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    SEPARATOR

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
      numeric varid = SETUP_DATA.PchSerialIoTimingM0CB,
        prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1CB,
        prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_UART_HELP), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
    endif;
  endform; //End of SerialIo Options Form ID

  form formid = AUTO_ID(SCS_OPTIONS_FORM_ID),
    title = STRING_TOKEN(STR_SCS_OPTIONS_FORM_TITLE);

    suppressif ideqval SETUP_VOLATILE_DATA.EmmcSupported == 0;
      oneof varid  = PCH_SETUP.PchScsEmmcEnabled,
        prompt   = STRING_TOKEN(STR_SCS_EMMC_CONTROLLER_PROMPT),
        help     = STRING_TOKEN(STR_SCS_EMMC_CONTROLLER_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchScsEmmcEnabled == 0;
        oneof varid  = PCH_SETUP.PchScsEmmcHs400Enabled,
          prompt   = STRING_TOKEN(STR_SCS_EMMC_HS400_PROMPT),
          help     = STRING_TOKEN(STR_SCS_EMMC_HS400_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;

        suppressif ideqval PCH_SETUP.PchScsEmmcHs400Enabled == 0;
          oneof varid = PCH_SETUP.PchScsEmmcHs400SoftwareTuning,
            prompt = STRING_TOKEN(STR_SCS_EMMC_SOFTWARE_TUNING_PROMPT),
            help   = STRING_TOKEN(STR_SCS_EMMC_SOFTWARE_TUNING_HELP),
            option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid  = PCH_SETUP.PchScsEmmcHs400DriverStrength,
          prompt   = STRING_TOKEN(STR_SCS_EMMC_HS400_DRV_STRENGTH_PROMPT),
          help     = STRING_TOKEN(STR_SCS_EMMC_HS400_DRV_STRENGTH_HELP),
          option text = STRING_TOKEN(STR_33_OHM), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_40_OHM), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_50_OHM), value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

    suppressif ideqval SETUP_VOLATILE_DATA.SdCardSupported == 0;
      oneof varid  = PCH_SETUP.PchScsSdCardEnabled,
        prompt   = STRING_TOKEN(STR_SCS_SDHC_CONTROLLER_PROMPT),
        help     = STRING_TOKEN(STR_SCS_SDHC_CONTROLLER_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;
    endif;

    #include "PchUfsStringPool.hfr"

    #define UFS_INDEX 0
      #include "PchUfsSingleController.hfr"
    #undef UFS_INDEX

    #define UFS_INDEX 1
      #include "PchUfsSingleController.hfr"
    #undef UFS_INDEX

  endform; // End of SCS_OPTIONS_FORM_ID

  #include "PchSetupPse.hfr"

  form formid = AUTO_ID(PCH_THERMAL_THROTTLING_OPTIONS_FORM_ID),
    title = STRING_TOKEN(STR_PCH_THERMAL_THROTTLING);
      oneof varid  = PCH_SETUP.PchTtLevelSuggestSet,
        prompt   = STRING_TOKEN(STR_PCH_THRM_TTLVL_SET_PROMPT),
        help     = STRING_TOKEN(STR_PCH_THRM_TTLVL_SET_HELP),
        option text = STRING_TOKEN(STR_SUGGEST_SETTING), value = 1, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL), value = 0, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchTtLevelSuggestSet == 1;
        checkbox varid  = PCH_SETUP.PchThrmTtEnable,
         prompt   = STRING_TOKEN(STR_PCH_THRM_TT_PROMPT),
         help     = STRING_TOKEN(STR_PCH_THRM_TT_HELP),
         // Flags behavior for checkbox is overloaded so that it equals
         // a DEFAULT value.  1 = ON, 0 = off
         flags    = 0 | RESET_REQUIRED,
         key      = 0,
        endcheckbox;

        checkbox varid  = PCH_SETUP.PchThrmTtState13Enable,
         prompt   = STRING_TOKEN(STR_PCH_THRM_TT13_PROMPT),
         help     = STRING_TOKEN(STR_PCH_THRM_TT13_HELP),
         // Flags behavior for checkbox is overloaded so that it equals
         // a DEFAULT value.  1 = ON, 0 = off
         flags    = 0 | RESET_REQUIRED,
         key      = 0,
        endcheckbox;

        checkbox varid  = PCH_SETUP.PchThrmTtLock,
         prompt   = STRING_TOKEN(STR_PCH_THRM_TT_LOCK_PROMPT),
         help     = STRING_TOKEN(STR_PCH_THRM_TT_LOCK_HELP),
         // Flags behavior for checkbox is overloaded so that it equals
         // a DEFAULT value.  1 = ON, 0 = off
         flags    = 0 | RESET_REQUIRED,
         key      = 0,
        endcheckbox;

        numeric varid = PCH_SETUP.PchThrmT0Level,
         prompt    = STRING_TOKEN(STR_PCH_THRM_T0_LVL_PROMPT),
         help      = STRING_TOKEN(STR_PCH_THRM_T0_LVL_HELP),
         flags     = RESET_REQUIRED,
         minimum   = 0,
         maximum   = 65535,
         step      = 1,
         default   = 0,
        endnumeric;

        numeric varid = PCH_SETUP.PchThrmT1Level,
         prompt    = STRING_TOKEN(STR_PCH_THRM_T1_LVL_PROMPT),
         help      = STRING_TOKEN(STR_PCH_THRM_T1_LVL_HELP),
         flags     = RESET_REQUIRED,
         minimum   = 0,
         maximum   = 65535,
         step      = 1,
         default   = 0,
        endnumeric;

        numeric varid = PCH_SETUP.PchThrmT2Level,
         prompt    = STRING_TOKEN(STR_PCH_THRM_T2_LVL_PROMPT),
         help      = STRING_TOKEN(STR_PCH_THRM_T2_LVL_HELP),
         flags     = RESET_REQUIRED,
         minimum   = 0,
         maximum   = 65535,
         step      = 1,
         default   = 0,
        endnumeric;
      endif;

      oneof varid  = PCH_SETUP.PchDmiTsSuggestSet,
         prompt   = STRING_TOKEN(STR_PCH_THRM_DMI_SET_PROMPT),
         help     = STRING_TOKEN(STR_PCH_THRM_DMI_SET_HELP),
         option text = STRING_TOKEN(STR_SUGGEST_SETTING), value = 1, flags = DEFAULT | RESET_REQUIRED;
         option text = STRING_TOKEN(STR_MANUAL), value = 0, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchDmiTsSuggestSet == 1;
        checkbox varid  = PCH_SETUP.PchDmiTsawEn,
         prompt   = STRING_TOKEN(STR_PCH_THRM_DMI_TSW_PROMPT),
         help     = STRING_TOKEN(STR_PCH_THRM_DMI_TSW_HELP),
         // Flags behavior for checkbox is overloaded so that it equals
         // a DEFAULT value.  1 = ON, 0 = off
         flags    = 0 | RESET_REQUIRED,
         key      = 0,
        endcheckbox;

        oneof varid  = PCH_SETUP.PchTs0Width,
         prompt   = STRING_TOKEN(STR_PCH_THRM_TS0W_PROMPT),
         help     = STRING_TOKEN(STR_PCH_THRM_TS0W_HELP),
         option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X1), value = 0, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X2), value = 1, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X4), value = 2, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X8), value = 3, flags = DEFAULT | RESET_REQUIRED;
         option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X16), value = 4, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchTs1Width,
          prompt   = STRING_TOKEN(STR_PCH_THRM_TS1W_PROMPT),
          help     = STRING_TOKEN(STR_PCH_THRM_TS1W_HELP),
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X1), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X2), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X4), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X8), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X16), value = 4, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchTs2Width,
          prompt   = STRING_TOKEN(STR_PCH_THRM_TS2W_PROMPT),
          help     = STRING_TOKEN(STR_PCH_THRM_TS2W_HELP),
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X1), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X2), value = 1, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X4), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X8), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X16), value = 4, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchTs3Width,
          prompt   = STRING_TOKEN(STR_PCH_THRM_TS3W_PROMPT),
          help     = STRING_TOKEN(STR_PCH_THRM_TS3W_HELP),
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X1), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X2), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X4), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X8), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X16), value = 4, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid  = PCH_SETUP.PchSataTsSuggestSet,
         prompt   = STRING_TOKEN(STR_PCH_THRM_SATA_SET_PROMPT),
         help     = STRING_TOKEN(STR_PCH_THRM_SATA_SET_HELP),
         option text = STRING_TOKEN(STR_SUGGEST_SETTING), value = 1, flags = DEFAULT | RESET_REQUIRED;
         option text = STRING_TOKEN(STR_MANUAL), value = 0, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        subtitle text = STRING_TOKEN(STR_PCH_SATA_PORT_0);
        oneof varid  = PCH_SETUP.PchP0T1M,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXT1M_PROMPT0),
          help     = STRING_TOKEN(STR_PCH_THRM_PXT1M_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X1), value = 1, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X2), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X4), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP0T2M,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXT2M_PROMPT0),
          help     = STRING_TOKEN(STR_PCH_THRM_PXT2M_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X2), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X4), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP0T3M,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXT3M_PROMPT0),
          help     = STRING_TOKEN(STR_PCH_THRM_PXT3M_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X2), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X4), value = 3, flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        checkbox varid  = PCH_SETUP.PchP0TDispFinit,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXTDISPFINIT_PROMPT0),
          help     = STRING_TOKEN(STR_PCH_THRM_PXTDISPFINIT_HELP),
          // Flags behavior for checkbox is overloaded so that it equals
          // a DEFAULT value.  1 = ON, 0 = off
          flags    = 0 | RESET_REQUIRED,
          key      = 0,
        endcheckbox;
      endif;

      suppressif ideqval PCH_SETUP.PchP0TDispFinit == 0 OR ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        oneof varid  = PCH_SETUP.PchP0TDisp,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXTDISP_PROMPT0),
          help     = STRING_TOKEN(STR_PCH_THRM_PXTDISP_HELP),
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_32), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_128), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_8), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP0Tinact,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXTINACT_PROMPT0),
          help     = STRING_TOKEN(STR_PCH_THRM_PXTINACT_HELP),
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_32), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_128), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_8), value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.PchP0TDispFinit == 1 OR ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        oneof varid  = PCH_SETUP.PchP0TDisp,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXTDISP_PROMPT0),
          help     = STRING_TOKEN(STR_PCH_THRM_PXTDISP_HELP),
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_32), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_128), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_8), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP0Tinact,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXTINACT_PROMPT0),
          help     = STRING_TOKEN(STR_PCH_THRM_PXTINACT_HELP),
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_32), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_128), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_8), value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        subtitle text = STRING_TOKEN(STR_PCH_SATA_PORT_1);
        oneof varid  = PCH_SETUP.PchP1T1M,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXT1M_PROMPT1),
          help     = STRING_TOKEN(STR_PCH_THRM_PXT1M_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X1), value = 1, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X2), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X4), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP1T2M,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXT2M_PROMPT1),
          help     = STRING_TOKEN(STR_PCH_THRM_PXT2M_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X2), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X4), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP1T3M,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXT3M_PROMPT1),
          help     = STRING_TOKEN(STR_PCH_THRM_PXT3M_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X2), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TS_WIDTH_X4), value = 3, flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        checkbox varid  = PCH_SETUP.PchP1TDispFinit,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXTDISPFINIT_PROMPT1),
          help     = STRING_TOKEN(STR_PCH_THRM_PXTDISPFINIT_HELP),
          // Flags behavior for checkbox is overloaded so that it equals
          // a DEFAULT value.  1 = ON, 0 = off
          flags    = 0 | RESET_REQUIRED,
          key      = 0,
        endcheckbox;
      endif;

      suppressif ideqval PCH_SETUP.PchP1TDispFinit == 0 OR ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        oneof varid  = PCH_SETUP.PchP1TDisp,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXTDISP_PROMPT1),
          help     = STRING_TOKEN(STR_PCH_THRM_PXTDISP_HELP),
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_32), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_128), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_8), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP1Tinact,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXTINACT_PROMPT1),
          help     = STRING_TOKEN(STR_PCH_THRM_PXTINACT_HELP),
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_32), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_128), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_FI_8), value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.PchP1TDispFinit == 1 OR ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        oneof varid  = PCH_SETUP.PchP1TDisp,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXTDISP_PROMPT1),
          help     = STRING_TOKEN(STR_PCH_THRM_PXTDISP_HELP),
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_32), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_128), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_8), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP1Tinact,
          prompt   = STRING_TOKEN(STR_PCH_THRM_PXTINACT_PROMPT1),
          help     = STRING_TOKEN(STR_PCH_THRM_PXTINACT_HELP),
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_32), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_128), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCH_THRM_TIME_8), value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;

    endform; // End of PCH_THERMAL_THROTTLING_OPTIONS_FORM_ID

  form formid = AUTO_ID(TOUCH_PAD_FORM_ID),
    title     = STRING_TOKEN(STR_TOUCH_PAD_FORM_TITLE);

    oneof varid  = SETUP_DATA.PchI2cTouchPadType,
        prompt   = STRING_TOKEN(STR_TOUCH_PAD_PROMPT),
        help     = STRING_TOKEN(STR_TOUCH_PAD_HELP),
        option text = STRING_TOKEN(STR_DISABLED),                         value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SYNAPTICS_PRECISION_TOUCHPAD), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SYNAPTICS_FORCEPAD),           value = 2, flags = RESET_REQUIRED;
        // ALPS Precision Touchpad (ClickPad)
        option text = STRING_TOKEN(STR_PCH_ALPS_PRECISION_TOUCHPAD),      value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SERIAL_IO_CUSTOM_DEVICE),      value = 5, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.PchI2cTouchPadType == 0 OR (
               ideqval SETUP_DATA.PchI2cSensorDevicePort[SERIAL_IO_I2C0] == SERIAL_IO_I2C_TOUCHPAD AND (
               ideqval SETUP_DATA.PchI2cTouchPadType == 3 OR
               ideqval SETUP_DATA.PchI2cTouchPadType == 4 ));
      oneof varid  = SETUP_DATA.PchI2cTouchPadIrqMode,
        prompt    = STRING_TOKEN(STR_TOUCH_PAD_IRQ_MODE),
        help      = STRING_TOKEN(STR_TOUCH_PAD_IRQ_MODE_HELP),
        option text = STRING_TOKEN(STR_GPIO_INT), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_APIC_INT), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif NOT ideqval SETUP_DATA.PchI2cTouchPadType == 5;
      numeric varid = SETUP_DATA.PchI2cTouchPadBusAddress,
        prompt      = STRING_TOKEN(STR_CUSTOM_DEVICE_BUS_ADDRESS),
        help        = STRING_TOKEN(STR_CUSTOM_DEVICE_PARAMETERS_HELP),
        flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x7F,
        step     = 1,
        default  = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchI2cTouchPadHidAddress,
        prompt      = STRING_TOKEN(STR_CUSTOM_DEVICE_HID_ADDRESS),
        help        = STRING_TOKEN(STR_CUSTOM_DEVICE_PARAMETERS_HELP),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFF,
        step     = 1,
        default  = 0,
      endnumeric;

      oneof varid  = SETUP_DATA.PchI2cTouchPadSpeed,
        prompt   = STRING_TOKEN(STR_CUSTOM_DEVICE_SPEED),
        help     = STRING_TOKEN(STR_CUSTOM_DEVICE_PARAMETERS_HELP),
        option text = STRING_TOKEN(STR_CUSTOM_DEVICE_SPEED_100K), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_CUSTOM_DEVICE_SPEED_400K), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_CUSTOM_DEVICE_SPEED_1M),   value = 2, flags = RESET_REQUIRED;
      endoneof;
    endif;

  endform;


  form formid = AUTO_ID(TOUCH_PANEL_FORM_ID),
    title     = STRING_TOKEN(STR_TOUCH_PANEL_FORM_TITLE);

    oneof varid  = SETUP_DATA.PchI2cTouchPanelType,
        prompt   = STRING_TOKEN(STR_TOUCH_PANEL_PROMPT),
        help     = STRING_TOKEN(STR_TOUCH_PANEL_HELP),
        option text = STRING_TOKEN(STR_DISABLED),                          value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SERIAL_IO_ATMEL3432_PANEL),     value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SERIAL_IO_ATMEL2952_PANEL),     value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SERIAL_IO_ELAN2097_PANEL),      value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SERIAL_IO_NTRIG_SAMSUNG_PANEL), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SERIAL_IO_NTRIG_SHARP_PANEL),   value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SERIAL_IO_WACOM_PANEL),         value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PCH_SERIAL_IO_CUSTOM_DEVICE),       value = 7, flags = RESET_REQUIRED;
      endoneof;

    suppressif ideqval SETUP_DATA.PchI2cTouchPanelType == 0;
      oneof varid  = SETUP_DATA.PchI2cTouchPanelIrqMode,
        prompt   = STRING_TOKEN(STR_TOUCH_PANEL_IRQ_MODE),
        help     = STRING_TOKEN(STR_TOUCH_PANEL_IRQ_MODE_HELP),
        option text = STRING_TOKEN(STR_GPIO_INT), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_APIC_INT), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif NOT ideqval SETUP_DATA.PchI2cTouchPanelType == 7;
      numeric varid = SETUP_DATA.PchI2cTouchPanelBusAddress,
        prompt      = STRING_TOKEN(STR_CUSTOM_DEVICE_BUS_ADDRESS),
        help        = STRING_TOKEN(STR_CUSTOM_DEVICE_PARAMETERS_HELP),
        flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x7F,
        step     = 1,
        default  = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchI2cTouchPanelHidAddress,
        prompt      = STRING_TOKEN(STR_CUSTOM_DEVICE_HID_ADDRESS),
        help        = STRING_TOKEN(STR_CUSTOM_DEVICE_PARAMETERS_HELP),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
    endif;

    suppressif NOT ideqval SETUP_DATA.PchI2cTouchPanelType >= 6;
      oneof varid  = SETUP_DATA.PchI2cTouchPanelSpeed,
        prompt   = STRING_TOKEN(STR_CUSTOM_DEVICE_SPEED),
        help     = STRING_TOKEN(STR_CUSTOM_DEVICE_PARAMETERS_HELP),
      suppressif NOT ideqval SETUP_DATA.PchI2cTouchPanelType == 7;
        option text = STRING_TOKEN(STR_CUSTOM_DEVICE_SPEED_100K), value = 0, flags = RESET_REQUIRED;
      endif;
          option text = STRING_TOKEN(STR_CUSTOM_DEVICE_SPEED_400K), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_CUSTOM_DEVICE_SPEED_1M),   value = 2, flags = RESET_REQUIRED;
      endoneof;
    endif;

  endform;


  form formid = AUTO_ID(FINGER_PRINT_FORM_ID),
    title     = STRING_TOKEN(STR_FINGER_PRINT_FORM_TITLE);

    oneof varid  = SETUP_DATA.PchSpiFingerPrintType,
        prompt   = STRING_TOKEN(STR_FINGER_PRINT_PROMPT),
        help     = STRING_TOKEN(STR_FINGER_PRINT_HELP),
        default = 0, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(STR_DISABLED),                  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SERIALIO_SPI_FPS_FPC1011),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SERIALIO_SPI_FPS_FPC1020),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SERIALIO_SPI_FPS_VFSI6101), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SERIALIO_SPI_FPS_VFSI7500), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SERIALIO_SPI_FPS_EGIS0300), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SERIALIO_SPI_FPS_FPC1021),  value = 6, flags = RESET_REQUIRED;
      endoneof;

    suppressif ideqval SETUP_DATA.PchSpiFingerPrintType == 0;
      oneof varid  = SETUP_DATA.PchSpiSensorIrqMode,
        prompt   = STRING_TOKEN(STR_FINGER_PRINT_IRQ_MODE),
        help     = STRING_TOKEN(STR_FINGER_PRINT_IRQ_MODE_HELP),
        option text = STRING_TOKEN(STR_GPIO_INT), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_APIC_INT), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

      SEPARATOR

   suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
     SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_SUB))
     numeric varid = SETUP_DATA.PchSerialIoTimingM0C8,
       prompt = STRING_TOKEN (STR_PCH_SIO_M0D3), help = STRING_TOKEN (STR_PCH_SIO_M0D3_HELP), minimum = 1, maximum = 10000, default = 200,
     endnumeric;
     numeric varid = SETUP_DATA.PchSerialIoTimingM1C8,
       prompt = STRING_TOKEN (STR_PCH_SIO_M1D3), help = STRING_TOKEN (STR_PCH_SIO_M1D3_HELP), minimum = 1, maximum = 10000, default = 2000,
     endnumeric;
   endif;
   suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
     SUBTITLE(STRING_TOKEN(STR_SERIAL_IO_TIMING_DISABLED))
   endif;

  endform;

    form formid = AUTO_ID(FIVR_CONFIGURATION_FORM_ID),
      title = STRING_TOKEN(STR_PCH_FIVR_CONFIGURATION_FORM_TITLE);

      text
        help   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_V1P05_CONFIG),
        text   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_V1P05_CONFIG),
        flags  = 0,
        key    = 0;

      checkbox varid  = PCH_SETUP.ExternalV1p05StateEnable[0],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S0I1_S0I2),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_V1P05_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalV1p05StateEnable[1],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S0I3),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_V1P05_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalV1p05StateEnable[2],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S3),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_V1P05_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalV1p05StateEnable[3],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S4),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_V1P05_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalV1p05StateEnable[4],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S5),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_V1P05_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalV1p05SupportedVoltageStates[0],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_ACTIVE_SWITCH),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_V1P05_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalV1p05SupportedVoltageStates[1],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_NORM_ACTIVE_VOLT),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_V1P05_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalV1p05SupportedVoltageStates[2],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_MIN_ACTIVE_VOLT),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_V1P05_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalV1p05SupportedVoltageStates[3],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_MIN_RET_VOLT),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_V1P05_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      SEPARATOR

      text
        help   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_CONFIG),
        text   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_CONFIG),
        flags  = 0,
        key    = 0;

      checkbox varid  = PCH_SETUP.ExternalVnnStateEnable[0],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S0I1_S0I2),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalVnnStateEnable[1],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S0I3),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalVnnStateEnable[2],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S3),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalVnnStateEnable[3],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S4),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalVnnStateEnable[4],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S5),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalVnnSupportedVoltageStates[0],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_ACTIVE_SWITCH),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalVnnSupportedVoltageStates[1],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_NORM_ACTIVE_VOLT),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalVnnSupportedVoltageStates[2],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_MIN_ACTIVE_VOLT),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalVnnSupportedVoltageStates[3],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_MIN_RET_VOLT),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      SEPARATOR

      text
        help   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_SX_CONFIG),
        text   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_SX_CONFIG),
        flags  = 0,
        key    = 0;

      checkbox varid  = PCH_SETUP.ExternalVnnSxStateEnable[2],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S3),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalVnnSxStateEnable[3],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S4),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = PCH_SETUP.ExternalVnnSxStateEnable[4],
        prompt   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_S5),
        help     = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VNN_HELP),
        // Flags behavior for checkbox is overloaded so that it equals
        // a DEFAULT value.  1 = ON, 0 = off
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      SEPARATOR

      text
        help   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VOLTAGE_CURRENT),
        text   = STRING_TOKEN(STR_PCH_FIVR_EXT_RAIL_VOLTAGE_CURRENT),
        flags  = 0,
        key    = 0;

      numeric varid = PCH_SETUP.ExternalV1p05IccMax,
        prompt    = STRING_TOKEN(STR_PCH_FIVR_EXT_V1P05_ICC_MAX),
        help      = STRING_TOKEN(STR_PCH_FIVR_EXT_V1P05_ICC_MAX_HELP),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 200,
        step      = 1,
        default   = 100,
      endnumeric;

      numeric varid = PCH_SETUP.ExternalV1p05Voltage,
        prompt    = STRING_TOKEN(STR_PCH_FIVR_EXT_V1P05_VOLTAGE),
        help      = STRING_TOKEN(STR_PCH_FIVR_EXT_V1P05_VOLTAGE_HELP),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 4095,
        step      = 1,
        default   = 0x1A4,
      endnumeric;

      numeric varid = PCH_SETUP.ExternalVnnIccMax,
        prompt    = STRING_TOKEN(STR_PCH_FIVR_EXT_VNN_ICC_MAX),
        help      = STRING_TOKEN(STR_PCH_FIVR_EXT_VNN_ICC_MAX_HELP),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 200,
        step      = 1,
        default   = 200,
      endnumeric;

      numeric varid = PCH_SETUP.ExternalVnnVoltage,
        prompt    = STRING_TOKEN(STR_PCH_FIVR_EXT_VNN_VOLTAGE),
        help      = STRING_TOKEN(STR_PCH_FIVR_EXT_VNN_VOLTAGE_HELP),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 4095,
        step      = 1,
        default   = 0x1A4,
      endnumeric;

      numeric varid = PCH_SETUP.ExternalVnnSxIccMax,
        prompt    = STRING_TOKEN(STR_PCH_FIVR_EXT_VNN_SX_ICC_MAX),
        help      = STRING_TOKEN(STR_PCH_FIVR_EXT_VNN_SX_ICC_MAX_HELP),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 200,
        step      = 1,
        default   = 200,
      endnumeric;

      numeric varid = PCH_SETUP.ExternalVnnSxVoltage,
        prompt    = STRING_TOKEN(STR_PCH_FIVR_EXT_VNN_SX_VOLTAGE),
        help      = STRING_TOKEN(STR_PCH_FIVR_EXT_VNN_SX_VOLTAGE_HELP),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 4095,
        step      = 1,
        default   = 0x1A4,
      endnumeric;

      SEPARATOR

      text
        help   = STRING_TOKEN(STR_PCH_FIVR_VCINN_AUX_CONFIG),
        text   = STRING_TOKEN(STR_PCH_FIVR_VCINN_AUX_CONFIG),
        flags  = 0,
        key    = 0;

      numeric varid = PCH_SETUP.PchRetToLowCurModeVolTranTime,
        prompt    = STRING_TOKEN(STR_PCH_FIVR_RMV_LCM_VOLT_TRANS_TIME),
        help      = STRING_TOKEN(STR_PCH_FIVR_RMV_LCM_VOLT_TRANS_TIME_HELP),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 255,
        step      = 1,
        default   = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PchRetToHighCurModeVolTranTime,
        prompt    = STRING_TOKEN(STR_PCH_FIVR_RMV_HCM_VOLT_TRANS_TIME),
        help      = STRING_TOKEN(STR_PCH_FIVR_RMV_HCM_VOLT_TRANS_TIME_HELP),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 255,
        step      = 1,
        default   = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PchLowToHighCurModeVolTranTime,
        prompt    = STRING_TOKEN(STR_PCH_FIVR_LCM_HCM_VOLT_TRANS_TIME),
        help      = STRING_TOKEN(STR_PCH_FIVR_LCM_HCM_VOLT_TRANS_TIME_HELP),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 255,
        step      = 1,
        default   = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PchOffToHighCurModeVolTranTime,
        prompt    = STRING_TOKEN(STR_PCH_FIVR_OFF_HCM_VOLT_TRANS_TIME),
        help      = STRING_TOKEN(STR_PCH_FIVR_OFF_HCM_VOLT_TRANS_TIME_HELP),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 4095,
        step      = 1,
        default   = 0x5A,
      endnumeric;

      SEPARATOR

      oneof varid = PCH_SETUP.PchFivrDynPm,
        prompt   = STRING_TOKEN(STR_PCH_FIVR_DYN_PM),
        help     = STRING_TOKEN(STR_PCH_FIVR_DYN_PM_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

    endform; // End of FIVR_CONFIGURATION_FORM_ID

    form formid = AUTO_ID(PCH_FIA_OPTIONS_FORM_ID),
      title   = STRING_TOKEN(STR_PCH_FIA_OPTIONS_FORM_TITLE);

      #include "PchFiaStringPool.hfr"

      #define CONNECTOR_INDEX 0
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 1
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 2
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 3
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 4
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 5
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 6
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 7
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 8
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 9
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 10
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 11
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 12
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 13
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 14
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
      #define CONNECTOR_INDEX 15
      #include "PchFiaSetupSingleLane.hfr"
      #undef CONNECTOR_INDEX
    endform;

  #include "PchSetupTsnGbe.hfr"
