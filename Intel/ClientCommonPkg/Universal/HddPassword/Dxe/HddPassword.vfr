//
// This file contains a 'Sample Driver' and is licensed as such
// under the terms of your license agreement with Intel or your
// vendor.  This file may be modified by the user, subject to
// the additional terms of the license agreement
//
///** @file
//
//    HDD Password Configuration Formset.
//
// Copyright (c) 2010 - 2013, Intel Corporation. All rights reserved.<BR>
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//
//**/


#include "HddPasswordNVDataStruc.h"

formset
  guid      = HDD_PASSWORD_CONFIG_GUID,
  title     = STRING_TOKEN(STR_HDD_SECURITY_CONFIG),
  help      = STRING_TOKEN(STR_HDD_SECURITY_CONFIG),
  classguid = EFI_HII_PLATFORM_SETUP_FORMSET_GUID,

  varstore HDD_PASSWORD_CONFIG,
  name = HDD_PASSWORD_CONFIG,
  guid = HDD_PASSWORD_CONFIG_GUID;

  form formid = FORMID_HDD_MAIN_FORM,
    title  = STRING_TOKEN(STR_HDD_SECURITY_CONFIG);

    label HDD_DEVICE_ENTRY_LABEL;
    label HDD_DEVICE_LABEL_END;

  endform;

  form
    formid = FORMID_HDD_DEVICE_FORM,
    title = STRING_TOKEN(STR_IDE_SECURITY_HD);

    subtitle text = STRING_TOKEN(STR_SECURITY_HDD_PWD_DESC);

    subtitle text = STRING_TOKEN(STR_NULL);

        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_ONE);
        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_TWO);
        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_THREE);
        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_FOUR);
        subtitle text = STRING_TOKEN(STR_SECURITY_HDD_BANNER_FIVE);

    subtitle text = STRING_TOKEN(STR_NULL);

        subtitle text = STRING_TOKEN(STR_HDD_PASSWORD_CONFIG);

    subtitle text = STRING_TOKEN(STR_NULL);

    suppressif TRUE;
        numeric varid   = HDD_PASSWORD_CONFIG.Supported,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
        endnumeric;

        numeric varid   = HDD_PASSWORD_CONFIG.Frozen,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
        endnumeric;

        numeric varid   = HDD_PASSWORD_CONFIG.Enabled,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
                step    = 0,
        endnumeric;

        numeric varid   = HDD_PASSWORD_CONFIG.Locked,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
                step    = 0,
        endnumeric;

        numeric varid   = HDD_PASSWORD_CONFIG.UserPasswordStatus,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
                step    = 0,
        endnumeric;

        numeric varid   = HDD_PASSWORD_CONFIG.MasterPasswordStatus,
                prompt  = STRING_TOKEN(STR_EMPTY),
                help    = STRING_TOKEN(STR_EMPTY),
                minimum = 0,
                maximum = 0xf0,
                step    = 0,
        endnumeric;
    endif;

        grayoutif  TRUE;
        suppressif ideqvallist HDD_PASSWORD_CONFIG.Supported == 0;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_SUPPORTED),
                text   = STRING_TOKEN(STR_YES),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Supported == 1;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_SUPPORTED),
                text   = STRING_TOKEN(STR_NO),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Enabled == 0;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_ENABLED),
                text   = STRING_TOKEN(STR_YES),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Enabled == 1;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_ENABLED),
                text   = STRING_TOKEN(STR_NO),
                flags  = 0,
                key    = 0;
        endif;


        suppressif ideqvallist HDD_PASSWORD_CONFIG.Locked == 0;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_LOCKED),
                text   = STRING_TOKEN(STR_YES),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Locked == 1;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_LOCKED),
                text   = STRING_TOKEN(STR_NO),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Frozen == 0;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_FROZEN),
                text   = STRING_TOKEN(STR_YES),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.Frozen == 1;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_SEC_FROZEN),
                text   = STRING_TOKEN(STR_NO),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.UserPasswordStatus == 0;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_IDE_USER_PASSWORD_STS),
                text   = STRING_TOKEN(STR_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.UserPasswordStatus == 1;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_IDE_USER_PASSWORD_STS),
                text   = STRING_TOKEN(STR_NOT_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.MasterPasswordStatus == 0;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_STS),
                text   = STRING_TOKEN(STR_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;

        suppressif ideqvallist HDD_PASSWORD_CONFIG.MasterPasswordStatus == 1;
            text
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_STS),
                text   = STRING_TOKEN(STR_NOT_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;
        endif;

        subtitle text = STRING_TOKEN(STR_NULL);

        grayoutif ideqval HDD_PASSWORD_CONFIG.Supported == 0 OR ideqval HDD_PASSWORD_CONFIG.Frozen == 1;
          password varid  = HDD_PASSWORD_CONFIG.IdeUserPassword,
                prompt      = STRING_TOKEN(STR_IDE_USER_PASSWORD),
                help        = STRING_TOKEN(STR_IDE_USER_PASSWORD_HELP),
                flags       = INTERACTIVE | RESET_REQUIRED,
                key         = KEY_HDD_USER_PASSWORD,
                minsize     = 0,
                maxsize     = 32,
                encoding    = 1,
          endpassword;
        endif;

        grayoutif ideqval HDD_PASSWORD_CONFIG.Supported == 0 OR ideqval HDD_PASSWORD_CONFIG.Frozen == 1 OR ideqval HDD_PASSWORD_CONFIG.Locked == 1;
          password varid  = HDD_PASSWORD_CONFIG.IdeMasterPassword,
                prompt      = STRING_TOKEN(STR_IDE_MASTER_PASSWORD),
                help        = STRING_TOKEN(STR_IDE_MASTER_PASSWORD_HELP),
                flags       = INTERACTIVE | RESET_REQUIRED,
                key         = KEY_HDD_MASTER_PASSWORD,
                minsize     = 0,
                maxsize     = 32,
                encoding    = 1,
          endpassword;
        endif;
  endform;

endformset;
